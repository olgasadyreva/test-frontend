[{"C:\\Users\\Olga\\Desktop\\test-frontend\\auth\\src\\index.js":"1","C:\\Users\\Olga\\Desktop\\test-frontend\\auth\\src\\App.js":"2","C:\\Users\\Olga\\Desktop\\test-frontend\\auth\\src\\store.js":"3","C:\\Users\\Olga\\Desktop\\test-frontend\\auth\\src\\reportWebVitals.js":"4","C:\\Users\\Olga\\Desktop\\test-frontend\\auth\\src\\components\\Header\\Header.js":"5","C:\\Users\\Olga\\Desktop\\test-frontend\\auth\\src\\components\\Home\\Home.js":"6","C:\\Users\\Olga\\Desktop\\test-frontend\\auth\\src\\components\\User\\User.js":"7","C:\\Users\\Olga\\Desktop\\test-frontend\\auth\\src\\components\\FormEdit\\FormEdit.js":"8","C:\\Users\\Olga\\Desktop\\test-frontend\\auth\\src\\components\\FormRegistr\\FormRegistr.js":"9","C:\\Users\\Olga\\Desktop\\test-frontend\\auth\\src\\components\\FormAuth\\FormAuth.js":"10","C:\\Users\\Olga\\Desktop\\test-frontend\\auth\\src\\components\\MyAccount\\MyAccount.js":"11","C:\\Users\\Olga\\Desktop\\test-frontend\\auth\\src\\actions\\index.js":"12","C:\\Users\\Olga\\Desktop\\test-frontend\\auth\\src\\reducers\\index.js":"13","C:\\Users\\Olga\\Desktop\\test-frontend\\auth\\src\\Validation.js":"14"},{"size":817,"mtime":1608297173573,"results":"15","hashOfConfig":"16"},{"size":3400,"mtime":1608294899613,"results":"17","hashOfConfig":"16"},{"size":357,"mtime":1607520009726,"results":"18","hashOfConfig":"16"},{"size":362,"mtime":499162500000,"results":"19","hashOfConfig":"16"},{"size":255,"mtime":1607656880845,"results":"20","hashOfConfig":"16"},{"size":221,"mtime":1607656791228,"results":"21","hashOfConfig":"16"},{"size":381,"mtime":1607576584349,"results":"22","hashOfConfig":"16"},{"size":9424,"mtime":1607685030671,"results":"23","hashOfConfig":"16"},{"size":9376,"mtime":1607673602369,"results":"24","hashOfConfig":"16"},{"size":8753,"mtime":1607755048784,"results":"25","hashOfConfig":"16"},{"size":1546,"mtime":1607674326064,"results":"26","hashOfConfig":"16"},{"size":373,"mtime":1607684567074,"results":"27","hashOfConfig":"16"},{"size":3816,"mtime":1607684796933,"results":"28","hashOfConfig":"16"},{"size":1796,"mtime":1607406656077,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1sznxeb",{"filePath":"32","messages":"33","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"35"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"35"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"35"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"35"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Olga\\Desktop\\test-frontend\\auth\\src\\index.js",["64"],"C:\\Users\\Olga\\Desktop\\test-frontend\\auth\\src\\App.js",["65","66","67","68","69"],"import React from 'react';\n//import ReactDom from 'react-dom';\nimport { Route, NavLink, Switch, Redirect } from 'react-router-dom';\n\n\n//import store from 'store';\n\nimport { connect } from 'react-redux';\n\nimport './App.css';\n\n\nimport Header from './components/Header/Header';\nimport Home from './components/Home/Home';\n\nimport FormAuth from './components/FormAuth/FormAuth';\nimport FormRegistr from './components/FormRegistr/FormRegistr';\nimport FormEdit from './components/FormEdit/FormEdit';\nimport User from './components/User/User';\nimport MyAccount from './components/MyAccount/MyAccount';\n\n\nimport { auth, registr, editUser } from './actions';\nimport store from './store';\n\nclass App extends React.Component {\n  state =  {\n    formName: \"auth\",\n    isAuth: false,\n    users: []\n  }\n\n  componentDidMount() {\n    const local = localStorage.getItem('users');\n    if(local && JSON.parse(local).length !== 0) {\n      this.state.users =  Object.assign(JSON.parse(localStorage.getItem('users')));\n    }\n  }\n\n  editData() {\n    alert('edit');\n    //store.dispatch(editUser(currentUser));\n  }\n\n  onBtnEditUserClick() {\n    console.log('editUserClick');\n  }\n\n  render () {\n   \n    return (\n      <div className=\"App pt-3\">\n        <Header/>\n        <NavLink to=\"/FormRegistr\">Регистрация</NavLink>\n        <a href=\"/FormRegistr\">Регистрация</a>\n        <Switch>\n          <Route key=\"Home\" exact path='/' component={ Home }>\n          {/* { store.getState().isAuth ? <Redirect from=\"/\" to=\"/MyAccount:id\" component={ MyAccount } /> : null} */}\n            <Home/>\n\n            <NavLink to=\"/FormRegistr\">Регистрация</NavLink>\n          </Route>\n\n          <Route key=\"FormRegistr\" exact path='/FormRegistr' component={ FormRegistr }>\n            {this.state.users.length !== 0 ?\n            null\n            :\n            <ul className=\"comments-list\">{'list' + this.state.users.length}\n              {\n                this.state.users.map((user) => { \n                  return (\n                     <User\n                       key = {user.id}\n                       id = {user.id}\n                       username = {user.name}\n                       email= {user.email}\n                       password = {user.password}\n                       // onBtnDeleteCommentClick = { () => this.props.removeComment(comment)}\n                     />\n                   )\n                 })\n               }\n           </ul>\n           \n           }\n\n          <FormRegistr handleSubmit={this.handleSubmit}/>\n\n            <NavLink to=\"/\" onClick={()=>{this.setState({formName : 'auth'})}}>Авторизация</NavLink>\n          </Route>\n\n          <Route key=\"FormEdit\" exact path='/FormEdit/:id' component={ FormEdit }>\n            <FormEdit/>\n          </Route>\n\n          <Route key=\"MyAccount\" exact path='/MyAccount/:id' component={ MyAccount }>\n            <MyAccount/>\n          </Route>\n        </Switch>\n      </div>\n    );\n  };\n\n}\nconst mapStateToProps = (state) => {\n  return {\n    users: state,\n    //isAuth: false,\n    //isRegistr: state.isRegistr */\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    registr: (newUser) => dispatch(registr(newUser)),\n    auth: (oldUser) => dispatch(registr(oldUser)),\n   // registr,\n    editUser: (id, state) => dispatch(editUser(id, state))\n}\n}\n\n\nexport default connect(mapStateToProps,mapDispatchToProps) (App);\n",["70","71"],"C:\\Users\\Olga\\Desktop\\test-frontend\\auth\\src\\store.js",[],"C:\\Users\\Olga\\Desktop\\test-frontend\\auth\\src\\reportWebVitals.js",[],"C:\\Users\\Olga\\Desktop\\test-frontend\\auth\\src\\components\\Header\\Header.js",[],"C:\\Users\\Olga\\Desktop\\test-frontend\\auth\\src\\components\\Home\\Home.js",[],"C:\\Users\\Olga\\Desktop\\test-frontend\\auth\\src\\components\\User\\User.js",[],"C:\\Users\\Olga\\Desktop\\test-frontend\\auth\\src\\components\\FormEdit\\FormEdit.js",["72","73"],"import React from 'react';\r\nimport { Form } from 'reactstrap';\r\nimport { validateFields } from '../../Validation';\r\nimport { connect } from 'react-redux';\r\nimport store from '../../store';\r\nimport { auth, registr, editUser } from '../../actions';\r\nimport User from '../User/User';\r\n\r\nconst initialState = {\r\n  username: {\r\n    value: '',\r\n    validateOnChange: false,\r\n    error: ''\r\n  },\r\n\r\n  email: {\r\n    value: '',\r\n    validateOnChange: false,\r\n    error: ''\r\n  },\r\n  password: {\r\n    value: '',\r\n    validateOnChange: false,\r\n    error: ''\r\n  },\r\n\r\n  submitCalled: false,\r\n  allFieldsValidated: false,\r\n  id: ''\r\n};\r\n\r\nclass FormEdit extends React.Component {\r\n  constructor(props) {\r\n      super(props);\r\n      this.state = initialState;\r\n  }\r\n\r\n  componentDidMount() {\r\n      //alert('edit');\r\n      let url = window.location.pathname;\r\n      let id = url.slice(-8);\r\n      const currentStore = Object.values(store.getState());\r\n      \r\n      console.dir(currentStore);\r\n      \r\n      const user = currentStore.filter(el => el.id === id);\r\n      console.dir(user);\r\n\r\n      const formElement = document.forms.edit;\r\n     // alert(formElement);\r\n      formElement.elements.username.value = user[0].username;\r\n      formElement.elements.email.value = user[0].email;\r\n      formElement.elements.password.value = user[0].password;\r\n\r\n      this.setState(() => ({\r\n        username: {\r\n          value :  user[0].username,\r\n        },\r\n        email: {\r\n          value :  user[0].email,\r\n        },\r\n        password: {\r\n          value :  user[0].password,\r\n        },\r\n        id: id\r\n      }));\r\n      //return id;\r\n  }\r\n\r\n     /* handleUserInput = (e) => {\r\n  const name = e.target.name;\r\n  const value = e.target.value;\r\n  this.setState({[name]: value});\r\n} */\r\n\r\n  handleFocusInput = (e) => {\r\n    e.target.removeAttribute('readonly');\r\n  }\r\n/*\r\n * validates the field onBlur if sumbit button is not clicked\r\n * set the validateOnChange to true for that field\r\n * check for error\r\n */\r\n\r\nhandleBlur(validationFunc, evt) {\r\n  const field = evt.target.name;\r\n  // validate onBlur only when validateOnChange for that field is false\r\n  // because if validateOnChange is already true there is no need to validate onBlur\r\n  if (\r\n    this.state[field]['validateOnChange'] === false &&\r\n    this.state.submitCalled === false\r\n  ) {\r\n    this.setState(state => ({\r\n      [field]: {\r\n        ...state[field],\r\n        validateOnChange: true,\r\n        error: validationFunc(state[field].value)\r\n      }\r\n    }));\r\n  }\r\n  return;\r\n}\r\n\r\n/*\r\n * update the value in state for that field\r\n * check for error if validateOnChange is true\r\n */\r\nhandleChange(validationFunc, evt) {\r\n  const field = evt.target.name;\r\n  const fieldVal = evt.target.value;\r\n  this.setState(state => ({\r\n    [field]: {\r\n      ...state[field],\r\n      value: fieldVal,\r\n      error: state[field]['validateOnChange'] ? validationFunc(fieldVal) : ''\r\n    }\r\n  }));\r\n}\r\n\r\nhandleSubmit(evt) {\r\n  //alert('edit');\r\n  evt.preventDefault();\r\n/* console.dir(this.state.username.value);\r\nconsole.dir(this.state.users);\r\nconsole.log(typeof(this.user)); */\r\n\r\n//  store.dispatch(editUser(user));  работает, но обнуляет хранилище и стор\r\n//debugger;\r\n/*\r\n* validate all fields\r\n* check if all fields are valid if yes then submit the Form\r\n* otherwise set errors for the feilds in the state\r\n*/\r\n\r\n\r\n\r\n\r\nconst { username, email, password } = this.state;\r\nconst usernameError = validateFields.validateUsername(username.value);\r\nconst emailError = validateFields.validateEmail(email.value);\r\nconst passwordError = validateFields.validatePassword(password.value);\r\n//const id = \r\n\r\n\r\nif ([usernameError, emailError, passwordError].every(e => e === false)) {\r\n  // no errors submit the form\r\n\r\n  //Сохраняем введенные в форму данные\r\n     let id = this.state.id;\r\n    const currentUser = {\r\n      id: id,\r\n      username: username.value,\r\n      email: email.value,\r\n      password: password.value\r\n    };\r\n\r\n    const currentState = store.getState();\r\n   \r\n\r\n    const newState = Object.values(currentState).map(el => {\r\n      if (el.id === currentUser.id) {\r\n        return currentUser;\r\n      }\r\n      return el;\r\n    });\r\n    \r\n    store.dispatch(editUser(newState));\r\n    debugger;\r\n      window.location.assign(`/MyAccount/${this.state.id}`);\r\n    \r\n    \r\n\r\n    //localStorage.setItem('users', JSON.stringify(currentUser));\r\n    \r\n   // clear state and show all fields are validated\r\n   this.setState({ ...initialState, allFieldsValidated: true });\r\n   this.showAllFieldsValidated();\r\n}\r\nelse {\r\n // update the state with errors\r\n    this.setState(state => ({\r\n      formname: 'edit',\r\n      titleLink: 'Редактирование профиля',\r\n\r\n      username: {\r\n        ...state.username,\r\n        validateOnChange: true,\r\n        error: usernameError\r\n      },\r\n\r\n      email: {\r\n        ...state.email,\r\n        validateOnChange: true,\r\n        error: emailError\r\n      },\r\n      password: {\r\n        ...state.password,\r\n        validateOnChange: true,\r\n        error: passwordError\r\n      }\r\n    }));\r\n  }\r\n\r\n}//end handlSubmit\r\n\r\nshowAllFieldsValidated() {\r\n  setTimeout(() => {\r\n    this.setState({ allFieldsValidated: false });\r\n  }, 1500);\r\n}\r\n\r\nrender () {\r\n  const { username, email, password, allFieldsValidated } = this.state;\r\n\r\n  return (\r\n    <div className=\"wrap\">\r\n      <header className=\"App-header \">Регистрация</header>\r\n\r\n      <h2>{store.getState().length}</h2>\r\n\r\n      <Form method='get' formname=\"edit\" name=\"edit\"\r\n    className='container col-lg-6 mt-5 border border-dark rounded p-3 js-form' \r\n    onSubmit={e => this.handleSubmit(e)}>\r\n\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"inputUserName\">Username</label>\r\n        <input \r\n          type='text'\r\n          name='username'\r\n          className='form-control'\r\n          placeholder='Введите ваше имя'\r\n          id='inputUserName'\r\n          value={username.value}\r\n          //onChange={this.handleUserInput}\r\n          onChange={evt =>\r\n            this.handleChange(validateFields.validateUsername, evt)\r\n          }\r\n          onBlur={evt =>\r\n            this.handleBlur(validateFields.validateUsername, evt)\r\n          }\r\n\r\n          onFocus={this.handleFocusInput}\r\n          //message={this.state.message}\r\n          readOnly='readonly'/>\r\n\r\n          <div className='text-danger'>{username.error}</div>\r\n      </div>\r\n\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"inputEmail\">Email address</label>\r\n        <input \r\n          type='email'\r\n          name='email'\r\n          className='form-control'\r\n          placeholder='Введите ваш Email'\r\n          id='inputEmail'\r\n          value={email.value}\r\n          //onChange={this.handleUserInput}\r\n          onChange={evt =>\r\n            this.handleChange(validateFields.validateEmail, evt)\r\n          }\r\n          onBlur={evt =>\r\n            this.handleBlur(validateFields.validateEmail, evt)\r\n          }\r\n\r\n          onFocus={this.handleFocusInput}\r\n          message={this.state.message}\r\n          readOnly='readonly'/>\r\n\r\n          <div className='text-danger'>{email.error}</div>\r\n      </div>\r\n\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"inputPassword\">Password</label>\r\n        <input \r\n          type='password'\r\n          name='password'\r\n          className='form-control'\r\n          placeholder='Введите ваш пароль'\r\n          id='inputPassword'\r\n          value={password.value}\r\n          onChange={evt =>\r\n            this.handleChange(validateFields.validatePassword, evt)\r\n          }\r\n          onBlur={evt =>\r\n            this.handleBlur(validateFields.validatePassword, evt)\r\n          }/>\r\n\r\n        <div className='text-danger'>{password.error}</div>\r\n      </div>\r\n\r\n      \r\n\r\n      <button \r\n        type='submit'\r\n        name='save'\r\n        className='btn btn-secondary btn-block'\r\n        onClick={this.submitForm}\r\n        onMouseDown={() => this.setState({ submitCalled: true })}>\r\n          Сохранить\r\n      </button>\r\n    </Form>\r\n\r\n      <div className=\"card-body\">\r\n        {allFieldsValidated && ( \r\n          <p className=\"text-success text-center\">\r\n            Success, All fields are validated\r\n          </p>\r\n        )}\r\n      </div>\r\n\r\n      <hr/>\r\n\r\n      {/* {\r\n        <ul className=\"users-list\">\r\n          {\r\n            users.map((user) => {\r\n\r\n              return (\r\n\r\n                <User\r\n                  key = {user.id}\r\n                  id = {user.id}\r\n                  username = {user.username}\r\n                  email = {user.email}\r\n                  password= {user.password}\r\n                  onBtnEditUsersClick = { () => this.props.editUser(user)}\r\n                />\r\n              )\r\n            })\r\n          }\r\n      </ul>\r\n      } */}\r\n\r\n    </div>\r\n  )\r\n}//end render\r\n\r\n} //end class\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    users: state,\r\n    //isAuth: state.isAuth,\r\n    //isRegistr: state.isRegistr\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  //registr;\r\n  return {\r\n    editUser: (newUsers) => dispatch(auth(newUsers)),\r\n    //registr: (currentUser) => {dispatch(registr(currentUser)); console.log(store.dispath.type)},\r\n  }\r\n}\r\n\r\nexport  default connect(mapStateToProps,mapDispatchToProps)(FormEdit);\r\n\r\n//export  default FormEdit;","C:\\Users\\Olga\\Desktop\\test-frontend\\auth\\src\\components\\FormRegistr\\FormRegistr.js",["74","75","76","77","78","79"],"import React from 'react';\r\nimport { Form } from 'reactstrap';\r\nimport { validateFields } from '../../Validation';\r\nimport { connect } from 'react-redux';\r\nimport store from '../../store';\r\nimport { auth, registr, editUser } from '../../actions';\r\nimport User from '../User/User';\r\n\r\nconst initialState = {\r\n  username: {\r\n    value: '',\r\n    validateOnChange: false,\r\n    error: ''\r\n  },\r\n\r\n  email: {\r\n    value: '',\r\n    validateOnChange: false,\r\n    error: ''\r\n  },\r\n  password: {\r\n    value: '',\r\n    validateOnChange: false,\r\n    error: ''\r\n  },\r\n  repeatpassword: {\r\n    value: '',\r\n    validateOnChange: false,\r\n    error: ''\r\n  },\r\n\r\n  submitCalled: false,\r\n  allFieldsValidated: false,\r\n  isRegistr: false\r\n};\r\n\r\nclass FormRegistr extends React.Component {\r\n  constructor(props) {\r\n      super(props);\r\n      this.state = initialState;\r\n  }\r\n\r\n     /* handleUserInput = (e) => {\r\n  const name = e.target.name;\r\n  const value = e.target.value;\r\n  this.setState({[name]: value});\r\n} */\r\n\r\n  handleFocusInput = (e) => {\r\n    e.target.removeAttribute('readonly');\r\n  }\r\n/*\r\n * validates the field onBlur if sumbit button is not clicked\r\n * set the validateOnChange to true for that field\r\n * check for error\r\n */\r\n\r\nhandleBlur(validationFunc, evt) {\r\n  const field = evt.target.name;\r\n  // validate onBlur only when validateOnChange for that field is false\r\n  // because if validateOnChange is already true there is no need to validate onBlur\r\n  if (\r\n    this.state[field]['validateOnChange'] === false &&\r\n    this.state.submitCalled === false\r\n  ) {\r\n    this.setState(state => ({\r\n      [field]: {\r\n        ...state[field],\r\n        validateOnChange: true,\r\n        error: validationFunc(state[field].value)\r\n      }\r\n    }));\r\n  }\r\n  return;\r\n}\r\n\r\n/*\r\n * update the value in state for that field\r\n * check for error if validateOnChange is true\r\n */\r\nhandleChange(validationFunc, evt) {\r\n  const field = evt.target.name;\r\n  const fieldVal = evt.target.value;\r\n  this.setState(state => ({\r\n    [field]: {\r\n      ...state[field],\r\n      value: fieldVal,\r\n      error: state[field]['validateOnChange'] ? validationFunc(fieldVal) : ''\r\n    }\r\n  }));\r\n}\r\n\r\nhandleSubmit(evt) {\r\n  evt.preventDefault();\r\n/*\r\n* validate all fields\r\n* check if all fields are valid if yes then submit the Form\r\n* otherwise set errors for the feilds in the state\r\n*/\r\n\r\nconst { username, email, password, repeatpassword, isRegistr } = this.state;\r\nconst usernameError = validateFields.validateUsername(username.value);\r\nconst emailError = validateFields.validateEmail(email.value);\r\nconst passwordError = validateFields.validatePassword(password.value);\r\nconst repeatpasswordError = validateFields.validaterepeatPassword(repeatpassword.value, password.value);\r\n\r\n\r\nif ([usernameError, emailError, passwordError, repeatpasswordError].every(e => e === false)) {\r\n  // no errors submit the form\r\n\r\n  //Сохраняем введенные в форму данные\r\n    const id = `f${(~~(Math.random()*1e8)).toString(16)}`;\r\n    const currentUser = {\r\n      id: id,\r\n      username: username.value,\r\n      email: email.value,\r\n      password: password.value\r\n    };\r\n\r\n    store.dispatch(registr(currentUser));\r\n\r\n    /* const currentLocalStorage= JSON.parse(localStorage.getItem('users'));\r\n    currentLocalStorage.push(currentUser);\r\n    localStorage.setItem('users', JSON.stringify(currentLocalStorage)); */\r\n    \r\n    \r\n   // clear state and show all fields are validated\r\n   this.setState({ ...initialState, allFieldsValidated: true });\r\n   this.showAllFieldsValidated();\r\n}\r\nelse {\r\n // update the state with errors\r\n    this.setState(state => ({\r\n      formname: 'registr',\r\n      titleLink: 'Авторизация',\r\n\r\n      username: {\r\n        ...state.username,\r\n        validateOnChange: true,\r\n        error: usernameError\r\n      },\r\n\r\n      email: {\r\n        ...state.email,\r\n        validateOnChange: true,\r\n        error: emailError\r\n      },\r\n      password: {\r\n        ...state.password,\r\n        validateOnChange: true,\r\n        error: passwordError\r\n      },\r\n      repeatpassword: {\r\n        ...state.repeatpassword,\r\n        validateOnChange: true,\r\n        error: repeatpasswordError\r\n      }\r\n    }));\r\n  }\r\n\r\n}//end handlSubmit\r\n\r\nshowAllFieldsValidated() {\r\n  setTimeout(() => {\r\n    this.setState({ allFieldsValidated: false });\r\n  }, 1500);\r\n}\r\n\r\nrender () {\r\n\r\n  //const local = localStorage.getItem('users');\r\n  //console.dir(local);\r\n  //if(local && JSON.parse(local.length !== 0)) {\r\n   // let users= JSON.parse(localStorage.getItem('users'));\r\n   //console.dir(Object.entries(users));\r\n\r\n    const { username, email, password, repeatpassword, allFieldsValidated } = this.state;\r\n    const {onBtnEditUserClick} = this.props;\r\n\r\n    return (\r\n      \r\n      <div className=\"wrap\">\r\n        <header className=\"App-header \">Регистрация</header>\r\n\r\n        <h2>store {store.getState().length}</h2>\r\n        {store.getState().length == 0 ?\r\n        <div>\r\n            <p className=\"message\">Зарегистрированных пользователей нет </p>\r\n        </div>\r\n        : null }\r\n        \r\n\r\n        <Form method='get' formname=\"registr\"\r\n          className='container col-lg-6 mt-5 border border-dark rounded p-3 js-form' \r\n          onSubmit={e => this.handleSubmit(e)}>\r\n\r\n          <div className=\"form-group\">\r\n          <label htmlFor=\"inputUserName\">Username</label>\r\n          <input \r\n            type='text'\r\n            name='username'\r\n            className='form-control'\r\n            placeholder='Введите ваше имя'\r\n            id='inputUserName'\r\n            value={username.value}\r\n            //onChange={this.handleUserInput}\r\n            onChange={evt =>\r\n              this.handleChange(validateFields.validateUsername, evt)\r\n            }\r\n            onBlur={evt =>\r\n              this.handleBlur(validateFields.validateUsername, evt)\r\n            }\r\n\r\n            onFocus={this.handleFocusInput}\r\n            readOnly='readonly'/>\r\n\r\n            <div className='text-danger'>{username.error}</div>\r\n          </div>\r\n\r\n          <div className=\"form-group\">\r\n          <label htmlFor=\"inputEmail\">Email address</label>\r\n          <input\r\n            type='email'\r\n            name='email'\r\n            className='form-control'\r\n            placeholder='Введите ваш Email'\r\n            id='inputEmail'\r\n            value={email.value}\r\n            //onChange={this.handleUserInput}\r\n            onChange={evt =>\r\n              this.handleChange(validateFields.validateEmail, evt)\r\n            }\r\n            onBlur={evt =>\r\n              this.handleBlur(validateFields.validateEmail, evt)\r\n            }\r\n\r\n            onFocus={this.handleFocusInput}\r\n            message={this.state.message}\r\n            readOnly='readonly'/>\r\n\r\n            <div className='text-danger'>{email.error}</div>\r\n          </div>\r\n\r\n          <div className=\"form-group\">\r\n          <label htmlFor=\"inputPassword\">Password</label>\r\n          <input\r\n            type='password'\r\n            name='password'\r\n            className='form-control'\r\n            placeholder='Введите ваш пароль'\r\n            id='inputPassword'\r\n            value={password.value}\r\n            onChange={evt =>\r\n              this.handleChange(validateFields.validatePassword, evt)\r\n            }\r\n            onBlur={evt =>\r\n              this.handleBlur(validateFields.validatePassword, evt)\r\n            }/>\r\n\r\n          <div className='text-danger'>{password.error}</div>\r\n          </div>\r\n\r\n          <div className=\"form-group\">\r\n        <label htmlFor=\"inputRepeatPassword\">Repeat Password</label>\r\n        <input \r\n          type='password'\r\n          name='repeatpassword'\r\n          className='form-control'\r\n          placeholder='Повторите пароль'\r\n          id='inputRepeatPassword'\r\n          value={repeatpassword.value}\r\n          //onChange={this.handleUserInput}\r\n          onChange={evt =>\r\n            this.handleChange(validateFields.validaterepeatPassword, evt)\r\n          }\r\n          onBlur={evt =>\r\n            this.handleBlur(validateFields.validaterepeatPassword, evt)\r\n          }\r\n          onFocus={this.handleFocusInput}\r\n          readOnly='readonly'/>\r\n\r\n          <div className='text-danger'>{repeatpassword.error}</div>\r\n          </div>\r\n\r\n          <button\r\n            type='submit'\r\n            name='registr'\r\n            className='btn btn-secondary btn-block'\r\n            onClick={this.submitForm}\r\n            onMouseDown={() => this.setState({ submitCalled: true })}>\r\n              Зарегистрироваться\r\n          </button>\r\n        </Form>\r\n\r\n        <div className=\"card-body\">\r\n        {allFieldsValidated && (\r\n          <p className=\"text-success text-center\">\r\n            Success, All fields are validated\r\n          </p>\r\n        )}\r\n        </div>\r\n      </div>\r\n)\r\n\r\n}\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    users: state,\r\n    //isAuth: state.isAuth,\r\n    //isRegistr: state.isRegistr\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  //registr;\r\n  return {\r\n    //auth: (oldUser) => dispatch(auth(oldUser)),\r\n    registr: (currentUser) => {dispatch(registr(currentUser))},\r\n  }\r\n}\r\n\r\nexport  default connect(mapStateToProps,mapDispatchToProps)(FormRegistr);\r\n\r\n//export  default FormRegistr;","C:\\Users\\Olga\\Desktop\\test-frontend\\auth\\src\\components\\FormAuth\\FormAuth.js",["80","81","82","83","84"],"import React from 'react';\r\nimport { Form } from 'reactstrap';\r\nimport { validateFields } from '../../Validation';\r\nimport { connect } from 'react-redux';\r\nimport store from '../../store';\r\nimport { auth, registr, editUser } from '../../actions';\r\nimport User from '../User/User';\r\n\r\nconst initialState = {\r\n  email: {\r\n    value: '',\r\n    validateOnChange: false,\r\n    error: ''\r\n  },\r\n  password: {\r\n    value: '',\r\n    validateOnChange: false,\r\n    error: ''\r\n  },\r\n \r\n  submitCalled: false,\r\n  allFieldsValidated: false,\r\n  //isAuth: this.props.isAuth\r\n};\r\n\r\nclass FormAuth extends React.Component {\r\n  constructor(props) {\r\n      super(props);\r\n      this.state = initialState;\r\n  }\r\n\r\n     /* handleUserInput = (e) => {\r\n  const name = e.target.name;\r\n  const value = e.target.value;\r\n  this.setState({[name]: value});\r\n} */\r\n\r\n  handleFocusInput = (e) => {\r\n    //alert(e.target);\r\n    e.target.removeAttribute('readonly');\r\n  }\r\n/*\r\n * validates the field onBlur if sumbit button is not clicked\r\n * set the validateOnChange to true for that field\r\n * check for error\r\n */\r\n\r\nhandleBlur(validationFunc, evt) {\r\n  const field = evt.target.name;\r\n  // validate onBlur only when validateOnChange for that field is false\r\n  // because if validateOnChange is already true there is no need to validate onBlur\r\n  if (\r\n    this.state[field]['validateOnChange'] === false &&\r\n    this.state.submitCalled === false\r\n  ) {\r\n    this.setState(state => ({\r\n      [field]: {\r\n        ...state[field],\r\n        validateOnChange: true,\r\n        error: validationFunc(state[field].value)\r\n      }\r\n    }));\r\n  }\r\n  return;\r\n}\r\n\r\n/*\r\n * update the value in state for that field\r\n * check for error if validateOnChange is true\r\n */\r\nhandleChange(validationFunc, evt) {\r\n  const field = evt.target.name;\r\n  const fieldVal = evt.target.value;\r\n  this.setState(state => ({\r\n    [field]: {\r\n      ...state[field],\r\n      value: fieldVal,\r\n      error: state[field]['validateOnChange'] ? validationFunc(fieldVal) : ''\r\n    }\r\n  }));\r\n}\r\n\r\nhandleSubmit(evt) {\r\n  evt.preventDefault();\r\n  \r\n/*\r\n* validate all fields\r\n* check if all fields are valid if yes then submit the Form\r\n* otherwise set errors for the feilds in the state\r\n*/\r\n\r\nconst { email, password } = this.state;\r\nconst emailError = validateFields.validateEmail(email.value);\r\nconst passwordError = validateFields.validatePassword(password.value);\r\n\r\nif ([emailError, passwordError].every(e => e === false)) {\r\n  // no errors submit the form\r\n  //alert(Object.values(JSON.parse(localStorage.getItem('users'))).length);\r\n  const currentStore = store.getState();\r\n  const user = currentStore.filter(el => el.email === email.value);\r\n  //alert(user[0]['id']);\r\n  //const currentLocalStorage = Object.values(JSON.parse(localStorage.getItem('users')));\r\n  \r\n  //console.dir(currentLocalStorage.length);\r\n  \r\n  //Проверяем, арегистрирован ли такой email\r\n   // const user = currentLocalStorage.filter((el) =>  { console.dir(el); return el['email'] === email.value});\r\n    \r\n    //const user = currentLocalStorage.filter(el =>el[2]['email'] === email.value); \r\n\r\n    console.dir(user);\r\n    console.dir(typeof(user));\r\n    console.log(user.length);\r\n    \r\n    if(user.length !== 0) {\r\n      \r\n      alert('user exist');\r\n       //Сохраняем введенные в форму данные\r\n      const id = user[0]['id'];\r\n      console.dir(id);\r\n      \r\n      const currentUser = {\r\n      id: id,\r\n      email: email.value,\r\n      password: password.value\r\n      };\r\n      console.dir(currentUser);\r\n      store.dispatch(auth(currentUser));\r\n      \r\n      window.location.assign(`/MyAccount/${currentUser.id}`);\r\n      //this.setState({isAuth: true});\r\n    }\r\n    else {\r\n      alert('new user');\r\n    }\r\n    \r\n    //alert(user);\r\n   // const user = currentStore.filter(el => el.email === email.value);\r\n   // alert(user[0]['id']);\r\n\r\n \r\n\r\n  \r\n  \r\n     /*  const user = currentLocalStorage.every(el =>  { return el['email'] === id});\r\n    const user = currentStore.filter(el => el.email === email.value);\r\n    alert(user[0]['id']); */\r\n\r\n    //store.dispatch(auth(currentUser));\r\n    //localStorage.setItem('users', JSON.stringify(currentUser));\r\n\r\n   // clear state and show all fields are validated\r\n   this.setState({ ...initialState, allFieldsValidated: true });\r\n   this.showAllFieldsValidated();\r\n\r\n // window.location.href = `/MyAccount/${id}`;\r\n} else {\r\n // update the state with errors\r\n    this.setState(state => ({\r\n      formname: 'edit',\r\n      titleLink: 'Авторизация',\r\n\r\n      email: {\r\n        ...state.email,\r\n        validateOnChange: true,\r\n        error: emailError\r\n      },\r\n      password: {\r\n        ...state.password,\r\n        validateOnChange: true,\r\n        error: passwordError\r\n      }\r\n    }));\r\n  }\r\n\r\n}//end handlSubmit\r\n\r\nshowAllFieldsValidated() {\r\n  setTimeout(() => {\r\n    this.setState({ allFieldsValidated: false });\r\n  }, 1500);\r\n}\r\n\r\nrender () {\r\n\r\n  //const local = localStorage.getItem('users');\r\n  //if(local && JSON.parse(local.length !== 0)) {\r\n\r\n   let users= JSON.parse(localStorage.getItem('users'));\r\n    const { email, password, allFieldsValidated } = this.state;\r\n\r\n    \r\n\r\n    return (\r\n      <div className=\"wrap\">\r\n        <h3>Форма авторизации</h3>\r\n\r\n        <h2>{store.getState().length}</h2>\r\n\r\n        <Form method='get' formname=\"auth\"\r\n          className='container col-lg-6 mt-5 border border-dark rounded p-3 js-form' \r\n          onSubmit={e => this.handleSubmit(e)}>\r\n\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"inputEmail\">Email address</label>\r\n          <input\r\n            type='email'\r\n            name='email'\r\n            className='form-control'\r\n            placeholder='Введите ваш Email'\r\n            id='inputEmail'\r\n            value={email.value}\r\n            //onChange={this.handleUserInput}\r\n            onChange={evt =>\r\n              this.handleChange(validateFields.validateEmail, evt)\r\n            }\r\n            onBlur={evt =>\r\n              this.handleBlur(validateFields.validateEmail, evt)\r\n            }\r\n\r\n            onFocus={this.handleFocusInput}\r\n            message={this.state.message}\r\n            readOnly='readonly'/>\r\n\r\n            <div className='text-danger'>{email.error}</div>\r\n        </div>\r\n\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"inputPassword\">Password</label>\r\n          <input\r\n            type='password'\r\n            name='password'\r\n            className='form-control'\r\n            placeholder='Введите ваш пароль'\r\n            id='inputPassword'\r\n            value={password.value}\r\n            onChange={evt =>\r\n              this.handleChange(validateFields.validatePassword, evt)\r\n            }\r\n            onBlur={evt =>\r\n              this.handleBlur(validateFields.validatePassword, evt)\r\n            }/>\r\n\r\n          <div className='text-danger'>{password.error}</div>\r\n        </div>\r\n\r\n        <button\r\n          type='submit'\r\n          name='auth'\r\n          className='btn btn-secondary btn-block'\r\n          onClick={this.submitForm}\r\n          onMouseDown={() => this.setState({ submitCalled: true })}>\r\n            Войти\r\n        </button>\r\n      </Form>\r\n\r\n        <div className=\"card-body\">\r\n          {allFieldsValidated && (\r\n            <p className=\"text-success text-center\">\r\n              Success, All fields are validated\r\n            </p>\r\n          )}\r\n        </div>\r\n\r\n        <hr/>\r\n\r\n       { users && users.length !== 0 ? \r\n          <ul className=\"users-list\">\r\n            {\r\n              Object.values(users).map((user) => {\r\n\r\n                return (\r\n\r\n                  <User\r\n                    key = {user.id}\r\n                    id = {user.id}\r\n                    username = {user.username}\r\n                    email = {user.email}\r\n                    password= {user.password}\r\n                    onBtnEditUsersClick = { () => this.props.editUser(user)}\r\n                  />\r\n                )\r\n              })\r\n            }\r\n        </ul>\r\n        :\r\n          <h3>Зарегистрированных пользователей нет!</h3>\r\n        }\r\n\r\n      </div>\r\n    )\r\n  //enf if\r\n}//end render\r\n\r\n} //end class\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    users: state,\r\n    //isAuth: state.isAuth,\r\n    //isRegistr: state.isRegistr\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  //registr;\r\n  return {\r\n    auth: (oldUser) => dispatch(auth(oldUser)),\r\n    //registr: (currentUser) => {dispatch(registr(currentUser)); console.log(store.dispath.type)},\r\n  }\r\n}\r\n\r\n//export  default connect(mapStateToProps,mapDispatchToProps)(FormAuth);\r\n\r\nexport  default FormAuth;","C:\\Users\\Olga\\Desktop\\test-frontend\\auth\\src\\components\\MyAccount\\MyAccount.js",["85","86","87","88","89","90","91"],"import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport store from '../../store';\r\nimport { editUser } from '../../actions';\r\n\r\n\r\n   //console.log('1' + editData);\r\n   let url = window.location.pathname;\r\n    let id = url.slice(-8);\r\n    \r\n    \r\n   \r\nconst myAccount = (props) => {\r\n    /* function componentWillUnmount() {\r\n        alert(1);\r\n            if(!localStorage.getItem(\"users\")){\r\n                localStorage.setItem(\"users\", this.props.users);\r\n            }\r\n        } */\r\n\r\n    const {editData, openModal,handleSubmit} = props;\r\n        let url = window.location.pathname;\r\n        let id = url.slice(-8);\r\n\r\n        \r\n     alert(id);\r\n     const currentLocalStorage = Object.values(JSON.parse(localStorage.getItem('users')));\r\n  console.dir(currentLocalStorage);\r\n  //Ищем пользователя по id\r\n    const user = currentLocalStorage.filter((el) =>  { console.dir(el); return el['id'] === id});\r\n\r\n\r\n    return (\r\n        <>\r\n            <h1>Личный кабинет</h1>\r\n            <div>Мои учетные данные</div>\r\n            <div>id: {user[0].id}</div>\r\n            <div>username: {user[0].username}</div>\r\n            <div>email: {user[0].email}</div>\r\n            <div>password: {user[0].password}</div>\r\n\r\n            <button type=\"button\" onClick={() => {window.location.assign(`/FormEdit/${user[0].id}`);}}>Редактировать данные</button>\r\n            <a href=\"/\">Выйти из аккаунта</a>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default myAccount;","C:\\Users\\Olga\\Desktop\\test-frontend\\auth\\src\\actions\\index.js",[],"C:\\Users\\Olga\\Desktop\\test-frontend\\auth\\src\\reducers\\index.js",[],"C:\\Users\\Olga\\Desktop\\test-frontend\\auth\\src\\Validation.js",[],{"ruleId":"92","severity":1,"message":"93","line":6,"column":26,"nodeType":"94","messageId":"95","endLine":6,"endColumn":32},{"ruleId":"92","severity":1,"message":"96","line":3,"column":34,"nodeType":"94","messageId":"95","endLine":3,"endColumn":42},{"ruleId":"92","severity":1,"message":"97","line":16,"column":8,"nodeType":"94","messageId":"95","endLine":16,"endColumn":16},{"ruleId":"92","severity":1,"message":"98","line":23,"column":10,"nodeType":"94","messageId":"95","endLine":23,"endColumn":14},{"ruleId":"92","severity":1,"message":"99","line":24,"column":8,"nodeType":"94","messageId":"95","endLine":24,"endColumn":13},{"ruleId":"100","severity":1,"message":"101","line":36,"column":7,"nodeType":"102","endLine":36,"endColumn":17},{"ruleId":"103","replacedBy":"104"},{"ruleId":"105","replacedBy":"106"},{"ruleId":"92","severity":1,"message":"107","line":6,"column":16,"nodeType":"94","messageId":"95","endLine":6,"endColumn":23},{"ruleId":"92","severity":1,"message":"108","line":7,"column":8,"nodeType":"94","messageId":"95","endLine":7,"endColumn":12},{"ruleId":"92","severity":1,"message":"98","line":6,"column":10,"nodeType":"94","messageId":"95","endLine":6,"endColumn":14},{"ruleId":"92","severity":1,"message":"109","line":6,"column":25,"nodeType":"94","messageId":"95","endLine":6,"endColumn":33},{"ruleId":"92","severity":1,"message":"108","line":7,"column":8,"nodeType":"94","messageId":"95","endLine":7,"endColumn":12},{"ruleId":"92","severity":1,"message":"110","line":101,"column":52,"nodeType":"94","messageId":"95","endLine":101,"endColumn":61},{"ruleId":"92","severity":1,"message":"111","line":178,"column":12,"nodeType":"94","messageId":"95","endLine":178,"endColumn":30},{"ruleId":"112","severity":1,"message":"113","line":186,"column":34,"nodeType":"114","messageId":"115","endLine":186,"endColumn":36},{"ruleId":"92","severity":1,"message":"116","line":4,"column":10,"nodeType":"94","messageId":"95","endLine":4,"endColumn":17},{"ruleId":"92","severity":1,"message":"107","line":6,"column":16,"nodeType":"94","messageId":"95","endLine":6,"endColumn":23},{"ruleId":"92","severity":1,"message":"109","line":6,"column":25,"nodeType":"94","messageId":"95","endLine":6,"endColumn":33},{"ruleId":"92","severity":1,"message":"117","line":297,"column":7,"nodeType":"94","messageId":"95","endLine":297,"endColumn":22},{"ruleId":"92","severity":1,"message":"118","line":305,"column":7,"nodeType":"94","messageId":"95","endLine":305,"endColumn":25},{"ruleId":"92","severity":1,"message":"116","line":2,"column":10,"nodeType":"94","messageId":"95","endLine":2,"endColumn":17},{"ruleId":"92","severity":1,"message":"99","line":3,"column":8,"nodeType":"94","messageId":"95","endLine":3,"endColumn":13},{"ruleId":"92","severity":1,"message":"109","line":4,"column":10,"nodeType":"94","messageId":"95","endLine":4,"endColumn":18},{"ruleId":"92","severity":1,"message":"119","line":9,"column":9,"nodeType":"94","messageId":"95","endLine":9,"endColumn":11},{"ruleId":"92","severity":1,"message":"120","line":21,"column":12,"nodeType":"94","messageId":"95","endLine":21,"endColumn":20},{"ruleId":"92","severity":1,"message":"121","line":21,"column":22,"nodeType":"94","messageId":"95","endLine":21,"endColumn":31},{"ruleId":"92","severity":1,"message":"122","line":21,"column":32,"nodeType":"94","messageId":"95","endLine":21,"endColumn":44},"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","'Redirect' is defined but never used.","'FormAuth' is defined but never used.","'auth' is defined but never used.","'store' is defined but never used.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","no-native-reassign",["123"],"no-negated-in-lhs",["124"],"'registr' is defined but never used.","'User' is defined but never used.","'editUser' is defined but never used.","'isRegistr' is assigned a value but never used.","'onBtnEditUserClick' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'connect' is defined but never used.","'mapStateToProps' is assigned a value but never used.","'mapDispatchToProps' is assigned a value but never used.","'id' is assigned a value but never used.","'editData' is assigned a value but never used.","'openModal' is assigned a value but never used.","'handleSubmit' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]