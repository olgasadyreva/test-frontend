{"version":3,"sources":["components/Header/Header.js","Validation.js","reducers/index.js","store.js","components/User/User.js","components/FormAuth/FormAuth.js","components/Home/Home.js","actions/index.js","components/FormRegistr/FormRegistr.js","components/FormEdit/FormEdit.js","components/MyAccount/MyAccount.js","App.js","reportWebVitals.js","index.js"],"names":["headerElement","validateFields","username","validator","isEmpty","isLength","min","email","isEmail","password","repeatpassword","users","state","action","type","id","payload","initialState","localStorage","getItem","JSON","parse","store","createStore","reducer","subscribe","setItem","stringify","getState","user","props","className","value","validateOnChange","error","submitCalled","allFieldsValidated","FormAuth","validationFunc","evt","field","target","name","this","setState","fieldVal","preventDefault","emailError","validateEmail","passwordError","validatePassword","every","e","Object","values","filter","el","length","alert","window","location","hash","formname","titleLink","setTimeout","Form","method","onSubmit","handleSubmit","htmlFor","placeholder","onChange","handleChange","onBlur","handleBlur","onFocus","handleFocusInput","onClick","submitForm","onMouseDown","map","User","onBtnEditUsersClick","editUser","React","Component","Home","registr","newState","FormRegistr","usernameError","validateUsername","repeatpasswordError","validaterepeatPassword","currentUser","Math","random","toString","dispatch","showAllFieldsValidated","onBtnEditUserClick","message","connect","FormEdit","split","currentStore","console","dir","formElement","document","forms","edit","elements","currentState","history","back","newUsers","myAccount","editData","openModal","href","App","formName","isAuth","local","assign","log","Header","to","exact","path","component","MyAccount","newUser","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.c5c05dda.chunk.js","sourcesContent":["import React from 'react';\r\n//import { Button } from 'reactstrap';\r\n\r\nconst headerElement = () => {\r\n    return (\r\n        <h1>SPA - Регистрация (авторизация) пользователей</h1>\r\n    )\r\n}\r\n\r\nexport default headerElement;","import validator from 'validator';\r\n\r\n/*\r\n * This class contains methods for validating fields using 'validator.js' library methods\r\n * The methods return error message if validation failed and false otherwise\r\n * You can use all supported validators and sanitizers of 'validator.js' libaray\r\n * See their docs here https://github.com/validatorjs/validator.js\r\n */\r\n\r\nclass ValidateFields {\r\n  /*\r\n   * A method that takes in the email\r\n   * Validates it\r\n   * Returns the response either error or false if there is no error\r\n   */\r\n  validateUsername(username) {\r\n    if (validator.isEmpty(username)) {\r\n      return 'Username is required';\r\n    } else if (!validator.isLength(username, { min: 3 })) {\r\n      return 'Username should be minimum 3 characters';\r\n    }\r\n    return false;\r\n  }\r\n\r\n   validateEmail(email) {\r\n    if (validator.isEmpty(email)) {\r\n      return 'Email is required';\r\n    } else if (!validator.isEmail(email)) {\r\n      return 'Invalid Email';\r\n    }\r\n    return false;\r\n  }\r\n\r\n  validatePassword(password) {\r\n    if (validator.isEmpty(password)) {\r\n      return 'Password is required';\r\n    } else if (!validator.isLength(password, { min: 3 })) {\r\n      return 'Password should be minimum 8 characters';\r\n    }\r\n    return false;\r\n  }\r\n\r\n  validaterepeatPassword(repeatpassword, password) {\r\n    if (validator.isEmpty(repeatpassword)) {\r\n      return 'Repeat password is required';\r\n    } else if (!validator.isLength(repeatpassword, { min: 3 })) {\r\n      return 'Password should be minimum 8 characters';\r\n    }else if (password !== repeatpassword) {\r\n      return 'Passwords do not match';\r\n    }\r\n    return false;\r\n  }\r\n}\r\n\r\nconst validateFields = new ValidateFields();\r\n\r\n// export the class instance, so we can import and use it anywhere\r\nexport { validateFields };","/* const initialState = {\r\n    users: [],\r\n    //isAuth: false,\r\n    //isRegistr: false\r\n} */\r\n\r\nconst users = (state = [], action) => {\r\n  switch (action.type) {\r\n//const reducer = (state = initialState, action) => {\r\n    //switch (action.type) {\r\n\r\n        case ('REGISTR'):\r\n              return [\r\n                ...state,\r\n                {\r\n                  id: action.payload.id,\r\n                  username: action.payload.username,\r\n                  email: action.payload.email,\r\n                  password: action.payload.password\r\n                }\r\n              ];\r\n        \r\n        case 'EDIT USER':\r\n          //console.log(action.payload);\r\n          //debugger;\r\n          return action.payload;\r\n            \r\n         // console.log(action.payload);\r\n         // const editUser = action.payload.id;\r\n          //console.dir(Object.values(state));\r\n          //const editUser = Object.values(state).filter(user => user.id === action.payload['id']);\r\n         // const currentStore = action.payload.state;\r\n          \r\n            //return Object.values(state).filter(user => user.id === action.payload['id']);\r\n\r\n            // заменяемый объект\r\n/* const newObject = {\r\n  id: 7;\r\n  key: 'value';\r\n}; */\r\n// исходный массив\r\n//const objectList = getList();\r\n\r\n// результирующй массив\r\n/* const newList = objectList.map(o => {\r\n  if (o.id === newObject.id) {\r\n    return newObject;\r\n  }\r\n  return o;\r\n}); */\r\n            \r\n            //...state,\r\n            /* {\r\n              id: action.payload.id,\r\n              username: action.payload.username,\r\n              email: action.payload.email,\r\n              password: action.payload.password\r\n            } */\r\n          \r\n             // return state.filter(user => user.id === action.payload.id);\r\n\r\n        // case ('REGISTR'):\r\n         //console.dir(action.payload);\r\n         // const previousState = state;\r\n         // console.log(previousState);\r\n\r\n         // const newUser = action.username ? {user: action.username} : {}\r\n           // const newEmail = action.email ? {email: action.email} : {}\r\n            //const newPassword = action.password ? {password: action.password} : {}\r\n            /* return Object.assign({}, state, {\r\n              users: action.payload\r\n            }); */\r\n\r\n          /*return {\r\n                ...state, */\r\n                \r\n               /*  {\r\n                  id: action.payload.id,\r\n                  action.payload.username['value'],\r\n                  action.payload.email['value'],\r\n                  action.payload.password['value']\r\n                } */\r\n                  //...previousState,\r\n                  /* id: action.payload.id,\r\n                  action.payload.username['value'],\r\n                  action.payload.email['value'],\r\n                  action.payload.password['value']\r\n                } */\r\n              //}\r\n          //  }\r\n        \r\n        \r\n// }\r\n\r\n        /* case ('EDIT'):\r\n          return {\r\n              ...state,\r\n              users: action.payload,\r\n          } */\r\n          \r\n        /* case ('EDIT USER'):\r\n          return state.filter(comment => comment.id !== action.payload.id); \r\n           \r\n\r\n            return {\r\n                ...state,\r\n               users: state.map(user => {\r\n                  if(user.id === action.payload) {\r\n                    return {\r\n                      user\r\n                      //likes: action.payload.likes,\r\n                    }\r\n                  }\r\n                  return user;\r\n                })\r\n              }; */\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default users;","import { createStore } from 'redux';\r\nimport reducer from './reducers';\r\n\r\nconst initialState = localStorage.getItem('users') ? JSON.parse(localStorage.getItem('users')) : [];\r\nconst store = createStore(reducer, initialState);\r\n\r\nstore.subscribe(() => {\r\n    localStorage.setItem('users', JSON.stringify(store.getState()));\r\n\r\n  });\r\n\r\nexport default store;","import React from 'react';\r\n//import '../css/comment.css';\r\n\r\nconst user = (props) => {\r\n  const {id, username, email, password } = props;\r\n\r\n  return(\r\n    <li className=\"user-item\" key={id} >\r\n      <span className=\"name\">{username}</span>\r\n      <span className=\"text\">{email}</span>\r\n      <span className=\"datetime\">{password}</span>\r\n    </li>\r\n)\r\n\r\n}\r\n\r\nexport default user;","import React from 'react';\r\nimport { Form } from 'reactstrap';\r\nimport { validateFields } from '../../Validation';\r\nimport store from '../../store';\r\n//import { auth, registr, editUser } from '../../actions';\r\nimport User from '../User/User';\r\n\r\nconst initialState = {\r\n  email: {\r\n    value: '',\r\n    validateOnChange: false,\r\n    error: ''\r\n  },\r\n  password: {\r\n    value: '',\r\n    validateOnChange: false,\r\n    error: ''\r\n  },\r\n \r\n  submitCalled: false,\r\n  allFieldsValidated: false,\r\n};\r\n\r\nclass FormAuth extends React.Component {\r\n  constructor(props) {\r\n      super(props);\r\n      this.state = initialState;\r\n  }\r\n\r\n/*\r\n * validates the field onBlur if sumbit button is not clicked\r\n * set the validateOnChange to true for that field\r\n * check for error\r\n */\r\n\r\nhandleBlur(validationFunc, evt) {\r\n  const field = evt.target.name;\r\n  // validate onBlur only when validateOnChange for that field is false\r\n  // because if validateOnChange is already true there is no need to validate onBlur\r\n  if (\r\n    this.state[field]['validateOnChange'] === false &&\r\n    this.state.submitCalled === false\r\n  ) {\r\n    this.setState(state => ({\r\n      [field]: {\r\n        ...state[field],\r\n        validateOnChange: true,\r\n        error: validationFunc(state[field].value)\r\n      }\r\n    }));\r\n  }\r\n  return;\r\n}\r\n\r\n/*\r\n * update the value in state for that field\r\n * check for error if validateOnChange is true\r\n */\r\nhandleChange(validationFunc, evt) {\r\n  const field = evt.target.name;\r\n  const fieldVal = evt.target.value;\r\n  this.setState(state => ({\r\n    [field]: {\r\n      ...state[field],\r\n      value: fieldVal,\r\n      error: state[field]['validateOnChange'] ? validationFunc(fieldVal) : ''\r\n    }\r\n  }));\r\n}\r\n\r\nhandleSubmit(evt) {\r\n  evt.preventDefault();\r\n  \r\n/*\r\n* validate all fields\r\n* check if all fields are valid if yes then submit the Form\r\n* otherwise set errors for the feilds in the state\r\n*/\r\n\r\nconst { email, password } = this.state;\r\nconst emailError = validateFields.validateEmail(email.value);\r\nconst passwordError = validateFields.validatePassword(password.value);\r\n\r\nif ([emailError, passwordError].every(e => e === false)) {\r\n  // no errors submit the form\r\n\r\n  //получает текущее сотсояние хранилища\r\n  const currentStore = Object.values(store.getState());\r\n //Проверяем, зарегистрирован ли такой email\r\n  const user = currentStore.filter(el => el.email === email.value);\r\n  //alert(user[0]['id']);\r\n  //const currentLocalStorage = Object.values(JSON.parse(localStorage.getItem('users')));\r\n  \r\n  //console.dir(currentLocalStorage.length);\r\n  \r\n \r\n   // const user = currentLocalStorage.filter((el) =>  { console.dir(el); return el['email'] === email.value});\r\n    \r\n    //const user = currentLocalStorage.filter(el =>el[2]['email'] === email.value); \r\n\r\n    //console.dir(user);\r\n    //console.dir(typeof(user));\r\n    //console.log(user.length);\r\n    \r\n    if(user.length !== 0) {\r\n      \r\n      alert('user exist');\r\n       //Сохраняем введенные в форму данные\r\n     //window.location.assign(`/MyAccount/${id}`);\r\n      const id = user[0]['id'];\r\n      //window.location = \"http://www.w3schools.com\";\r\n      //window.location.assign(`/MyAccount/${id}`);\r\n      window.location.hash = `/MyAccount/${id}`;\r\n      //console.dir(id);\r\n      \r\n     /*  const currentUser = {\r\n      id: id,\r\n      email: email.value,\r\n      password: password.value\r\n      };\r\n      console.dir(currentUser);\r\n      store.dispatch(auth(currentUser));\r\n      \r\n      window.location.assign(`/MyAccount/${currentUser.id}`); */\r\n    }\r\n    else {\r\n      alert('Вы не зарегистрированы!');\r\n      this.setState({ ...initialState, allFieldsValidated: false });\r\n      //this.showAllFieldsValidated();\r\n    }\r\n    \r\n    //alert(user);\r\n   // const user = currentStore.filter(el => el.email === email.value);\r\n   // alert(user[0]['id']);\r\n\r\n \r\n\r\n  \r\n  \r\n     /*  const user = currentLocalStorage.every(el =>  { return el['email'] === id});\r\n    const user = currentStore.filter(el => el.email === email.value);\r\n    alert(user[0]['id']); */\r\n\r\n    //store.dispatch(auth(currentUser));\r\n    //localStorage.setItem('users', JSON.stringify(currentUser));\r\n\r\n   // clear state and show all fields are validated\r\n   //this.setState({ ...initialState, allFieldsValidated: true });\r\n   //this.showAllFieldsValidated();\r\n\r\n // window.location.href = `/MyAccount/${id}`;\r\n} else {\r\n // update the state with errors\r\n    this.setState(state => ({\r\n      formname: 'edit',\r\n      titleLink: 'Авторизация',\r\n\r\n      email: {\r\n        ...state.email,\r\n        validateOnChange: true,\r\n        error: emailError\r\n      },\r\n      password: {\r\n        ...state.password,\r\n        validateOnChange: true,\r\n        error: passwordError\r\n      }\r\n    }));\r\n  }\r\n\r\n}//end handlSubmit\r\n\r\nshowAllFieldsValidated() {\r\n  setTimeout(() => {\r\n    this.setState({ allFieldsValidated: false });\r\n  }, 1500);\r\n}\r\n\r\nrender () {\r\n\r\n  //const local = localStorage.getItem('users');\r\n  //if(local && JSON.parse(local.length !== 0)) {\r\n\r\n   let users= JSON.parse(localStorage.getItem('users'));\r\n    const { email, password, allFieldsValidated } = this.state;\r\n\r\n    \r\n\r\n    return (\r\n      <div className=\"wrap\">\r\n        <h3>Форма авторизации</h3>\r\n\r\n        <h2>{store.getState().length}</h2>\r\n\r\n        <Form method='post' name=\"auth\"\r\n          className='container col-lg-6 mt-5 border border-dark rounded p-3 js-form' \r\n          onSubmit={e => this.handleSubmit(e)}>\r\n\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"inputEmail\">Email address</label>\r\n          <input\r\n            type='email'\r\n            name='email'\r\n            className='form-control'\r\n            placeholder='Введите ваш Email'\r\n            id='inputEmail'\r\n            value={email.value}\r\n            //onChange={this.handleUserInput}\r\n            onChange={evt =>\r\n              this.handleChange(validateFields.validateEmail, evt)\r\n            }\r\n            onBlur={evt =>\r\n              this.handleBlur(validateFields.validateEmail, evt)\r\n            }\r\n\r\n            onFocus={this.handleFocusInput}/>\r\n\r\n            <div className='text-danger'>{email.error}</div>\r\n        </div>\r\n\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"inputPassword\">Password</label>\r\n          <input\r\n            type='password'\r\n            name='password'\r\n            className='form-control'\r\n            placeholder='Введите ваш пароль'\r\n            id='inputPassword'\r\n            value={password.value}\r\n            onChange={evt =>\r\n              this.handleChange(validateFields.validatePassword, evt)\r\n            }\r\n            onBlur={evt =>\r\n              this.handleBlur(validateFields.validatePassword, evt)\r\n            }/>\r\n\r\n          <div className='text-danger'>{password.error}</div>\r\n        </div>\r\n\r\n        <button\r\n          type='submit'\r\n          name='auth'\r\n          className='btn btn-secondary btn-block'\r\n          onClick={this.submitForm}\r\n          onMouseDown={() => this.setState({ submitCalled: true })}>\r\n            Войти\r\n        </button>\r\n      </Form>\r\n\r\n        <div className=\"card-body\">\r\n          {allFieldsValidated && (\r\n            <p className=\"text-success text-center\">\r\n              Вы успешно авторизовались!\r\n            </p>\r\n          )}\r\n        </div>\r\n\r\n        <hr/>\r\n\r\n       { users && users.length !== 0 ? \r\n          <ul className=\"users-list\">\r\n            {\r\n              Object.values(users).map((user) => {\r\n\r\n                return (\r\n\r\n                  <User\r\n                    key = {user.id}\r\n                    id = {user.id}\r\n                    username = {user.username}\r\n                    email = {user.email}\r\n                    password= {user.password}\r\n                    onBtnEditUsersClick = { () => this.props.editUser(user)}\r\n                  />\r\n                )\r\n              })\r\n            }\r\n        </ul>\r\n        :\r\n          <h3>Зарегистрированных пользователей нет!</h3>\r\n        }\r\n\r\n      </div>\r\n    )\r\n  //enf if\r\n}//end render\r\n\r\n} //end class\r\n\r\n/* const mapStateToProps = (state) => {\r\n  return {\r\n    users: state,\r\n    //isAuth: state.isAuth,\r\n    //isRegistr: state.isRegistr\r\n  }\r\n} */\r\n\r\n/* const mapDispatchToProps = (dispatch) => {\r\n  //registr;\r\n  return {\r\n    auth: (oldUser) => dispatch(auth(oldUser)),\r\n    //registr: (currentUser) => {dispatch(registr(currentUser)); console.log(store.dispath.type)},\r\n  }\r\n} */\r\n\r\n//export  default connect(mapStateToProps,mapDispatchToProps)(FormAuth);\r\n\r\nexport  default FormAuth;","import React from 'react';\r\nimport FormAuth from '../FormAuth/FormAuth';\r\n\r\nconst Home = () => {\r\n    return (\r\n        <FormAuth/>\r\n          /* <FormAuth isAuth={this.state.isAuth}/> */\r\n    )\r\n}\r\n\r\nexport default Home;","export const auth = (isAuth) => {\r\n  return {\r\n      type: 'AUTH',\r\n      payload: isAuth\r\n  }\r\n}\r\n\r\nexport const registr = (user) => {\r\n  return {\r\n      type: 'REGISTR',\r\n      //payload: isRegistr,\r\n      payload: user,\r\n  }\r\n}\r\n\r\nexport const editUser = (newState) => {\r\n  return {\r\n      type: 'EDIT USER',\r\n      payload: newState\r\n      //payload: id\r\n  }\r\n}\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport { Form } from 'reactstrap';\r\nimport { validateFields } from '../../Validation';\r\nimport { connect } from 'react-redux';\r\nimport store from '../../store';\r\nimport { auth, registr, editUser } from '../../actions';\r\nimport User from '../User/User';\r\n\r\nconst initialState = {\r\n  username: {\r\n    value: '',\r\n    validateOnChange: false,\r\n    error: ''\r\n  },\r\n\r\n  email: {\r\n    value: '',\r\n    validateOnChange: false,\r\n    error: ''\r\n  },\r\n  password: {\r\n    value: '',\r\n    validateOnChange: false,\r\n    error: ''\r\n  },\r\n  repeatpassword: {\r\n    value: '',\r\n    validateOnChange: false,\r\n    error: ''\r\n  },\r\n\r\n  submitCalled: false,\r\n  allFieldsValidated: false,\r\n};\r\n\r\nclass FormRegistr extends React.Component {\r\n  constructor(props) {\r\n      super(props);\r\n      this.state = initialState;\r\n  }\r\n\r\n\r\n/*\r\n * validates the field onBlur if sumbit button is not clicked\r\n * set the validateOnChange to true for that field\r\n * check for error\r\n */\r\n\r\nhandleBlur(validationFunc, evt) {\r\n  const field = evt.target.name;\r\n  // validate onBlur only when validateOnChange for that field is false\r\n  // because if validateOnChange is already true there is no need to validate onBlur\r\n  if (\r\n    this.state[field]['validateOnChange'] === false &&\r\n    this.state.submitCalled === false\r\n  ) {\r\n    this.setState(state => ({\r\n      [field]: {\r\n        ...state[field],\r\n        validateOnChange: true,\r\n        error: validationFunc(state[field].value)\r\n      }\r\n    }));\r\n  }\r\n  return;\r\n}\r\n\r\n/*\r\n * update the value in state for that field\r\n * check for error if validateOnChange is true\r\n */\r\nhandleChange(validationFunc, evt) {\r\n  const field = evt.target.name;\r\n  const fieldVal = evt.target.value;\r\n  this.setState(state => ({\r\n    [field]: {\r\n      ...state[field],\r\n      value: fieldVal,\r\n      error: state[field]['validateOnChange'] ? validationFunc(fieldVal) : ''\r\n    }\r\n  }));\r\n}\r\n\r\nhandleSubmit(evt) {\r\n  evt.preventDefault();\r\n/*\r\n* validate all fields\r\n* check if all fields are valid if yes then submit the Form\r\n* otherwise set errors for the feilds in the state\r\n*/\r\n\r\nconst { username, email, password, repeatpassword } = this.state;\r\nconst usernameError = validateFields.validateUsername(username.value);\r\nconst emailError = validateFields.validateEmail(email.value);\r\nconst passwordError = validateFields.validatePassword(password.value);\r\nconst repeatpasswordError = validateFields.validaterepeatPassword(repeatpassword.value, password.value);\r\n\r\n\r\nif ([usernameError, emailError, passwordError, repeatpasswordError].every(e => e === false)) {\r\n  // no errors submit the form\r\n\r\n  //Сохраняем введенные в форму данные\r\n    const id = `f${(~~(Math.random()*1e8)).toString(16)}`;\r\n    const currentUser = {\r\n      id: id,\r\n      username: username.value,\r\n      email: email.value,\r\n      password: password.value\r\n    };\r\n\r\n    store.dispatch(registr(currentUser));\r\n\r\n    /* const currentLocalStorage= JSON.parse(localStorage.getItem('users'));\r\n    currentLocalStorage.push(currentUser);\r\n    localStorage.setItem('users', JSON.stringify(currentLocalStorage)); */\r\n    \r\n    \r\n   // clear state and show all fields are validated\r\n   this.setState({ ...initialState, allFieldsValidated: true });\r\n   this.showAllFieldsValidated();\r\n}\r\nelse {\r\n // update the state with errors\r\n    this.setState(state => ({\r\n      formname: 'registr',\r\n      titleLink: 'Авторизация',\r\n\r\n      username: {\r\n        ...state.username,\r\n        validateOnChange: true,\r\n        error: usernameError\r\n      },\r\n\r\n      email: {\r\n        ...state.email,\r\n        validateOnChange: true,\r\n        error: emailError\r\n      },\r\n      password: {\r\n        ...state.password,\r\n        validateOnChange: true,\r\n        error: passwordError\r\n      },\r\n      repeatpassword: {\r\n        ...state.repeatpassword,\r\n        validateOnChange: true,\r\n        error: repeatpasswordError\r\n      }\r\n    }));\r\n  }\r\n\r\n}//end handlSubmit\r\n\r\nshowAllFieldsValidated() {\r\n  setTimeout(() => {\r\n    this.setState({ allFieldsValidated: false });\r\n  }, 1500);\r\n}\r\n\r\nrender () {\r\n\r\n  //const local = localStorage.getItem('users');\r\n  //console.dir(local);\r\n  //if(local && JSON.parse(local.length !== 0)) {\r\n   // let users= JSON.parse(localStorage.getItem('users'));\r\n   //console.dir(Object.entries(users));\r\n\r\n    const { username, email, password, repeatpassword, allFieldsValidated } = this.state;\r\n    const {onBtnEditUserClick} = this.props;\r\n\r\n    return (\r\n      \r\n      <div className=\"wrap\">\r\n        <header className=\"App-header \">Регистрация</header>\r\n\r\n        <h2>store {store.getState().length}</h2>\r\n        {store.getState().length == 0 ?\r\n        <div>\r\n            <p className=\"message\">Зарегистрированных пользователей нет </p>\r\n        </div>\r\n        : null }\r\n        \r\n\r\n        <Form method='post' name=\"registr\"\r\n          className='container col-lg-6 mt-5 border border-dark rounded p-3 js-form' \r\n          onSubmit={e => this.handleSubmit(e)}>\r\n\r\n          <div className=\"form-group\">\r\n          <label htmlFor=\"inputUserName\">Username</label>\r\n          <input \r\n            type='text'\r\n            name='username'\r\n            className='form-control'\r\n            placeholder='Введите ваше имя'\r\n            id='inputUserName'\r\n            value={username.value}\r\n            //onChange={this.handleUserInput}\r\n            onChange={evt =>\r\n              this.handleChange(validateFields.validateUsername, evt)\r\n            }\r\n            onBlur={evt =>\r\n              this.handleBlur(validateFields.validateUsername, evt)\r\n            }\r\n\r\n            onFocus={this.handleFocusInput}/>\r\n\r\n            <div className='text-danger'>{username.error}</div>\r\n          </div>\r\n\r\n          <div className=\"form-group\">\r\n          <label htmlFor=\"inputEmail\">Email address</label>\r\n          <input\r\n            type='email'\r\n            name='email'\r\n            className='form-control'\r\n            placeholder='Введите ваш Email'\r\n            id='inputEmail'\r\n            value={email.value}\r\n            //onChange={this.handleUserInput}\r\n            onChange={evt =>\r\n              this.handleChange(validateFields.validateEmail, evt)\r\n            }\r\n            onBlur={evt =>\r\n              this.handleBlur(validateFields.validateEmail, evt)\r\n            }\r\n\r\n            onFocus={this.handleFocusInput}\r\n            message={this.state.message}/>\r\n\r\n            <div className='text-danger'>{email.error}</div>\r\n          </div>\r\n\r\n          <div className=\"form-group\">\r\n          <label htmlFor=\"inputPassword\">Password</label>\r\n          <input\r\n            type='password'\r\n            name='password'\r\n            className='form-control'\r\n            placeholder='Введите ваш пароль'\r\n            id='inputPassword'\r\n            value={password.value}\r\n            onChange={evt =>\r\n              this.handleChange(validateFields.validatePassword, evt)\r\n            }\r\n            onBlur={evt =>\r\n              this.handleBlur(validateFields.validatePassword, evt)\r\n            }/>\r\n\r\n          <div className='text-danger'>{password.error}</div>\r\n          </div>\r\n\r\n          <div className=\"form-group\">\r\n        <label htmlFor=\"inputRepeatPassword\">Repeat Password</label>\r\n        <input \r\n          type='password'\r\n          name='repeatpassword'\r\n          className='form-control'\r\n          placeholder='Повторите пароль'\r\n          id='inputRepeatPassword'\r\n          value={repeatpassword.value}\r\n          //onChange={this.handleUserInput}\r\n          onChange={evt =>\r\n            this.handleChange(validateFields.validaterepeatPassword, evt)\r\n          }\r\n          onBlur={evt =>\r\n            this.handleBlur(validateFields.validaterepeatPassword, evt)\r\n          }\r\n          onFocus={this.handleFocusInput}/>\r\n\r\n          <div className='text-danger'>{repeatpassword.error}</div>\r\n          </div>\r\n\r\n          <button\r\n            type='submit'\r\n            name='registr'\r\n            className='btn btn-secondary btn-block'\r\n            onClick={this.submitForm}\r\n            onMouseDown={() => this.setState({ submitCalled: true })}>\r\n              Зарегистрироваться\r\n          </button>\r\n        </Form>\r\n\r\n        <div className=\"card-body\">\r\n        {allFieldsValidated && (\r\n          <p className=\"text-success text-center\">\r\n            Вы зарегистрированы!\r\n          </p>\r\n        )}\r\n        </div>\r\n      </div>\r\n)\r\n\r\n}\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    users: state,\r\n    //isAuth: state.isAuth,\r\n    //isRegistr: state.isRegistr\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  //registr;\r\n  return {\r\n    //auth: (oldUser) => dispatch(auth(oldUser)),\r\n    registr: (currentUser) => {dispatch(registr(currentUser))},\r\n  }\r\n}\r\n\r\nexport  default connect(mapStateToProps,mapDispatchToProps)(FormRegistr);\r\n\r\n//export  default FormRegistr;","import React from 'react';\r\nimport { Form } from 'reactstrap';\r\nimport { validateFields } from '../../Validation';\r\nimport { connect } from 'react-redux';\r\nimport store from '../../store';\r\nimport { auth, registr, editUser } from '../../actions';\r\nimport User from '../User/User';\r\n\r\nconst initialState = {\r\n  username: {\r\n    value: '',\r\n    validateOnChange: false,\r\n    error: ''\r\n  },\r\n\r\n  email: {\r\n    value: '',\r\n    validateOnChange: false,\r\n    error: ''\r\n  },\r\n  password: {\r\n    value: '',\r\n    validateOnChange: false,\r\n    error: ''\r\n  },\r\n\r\n  submitCalled: false,\r\n  allFieldsValidated: false,\r\n  id: ''\r\n};\r\n\r\nclass FormEdit extends React.Component {\r\n  constructor(props) {\r\n      super(props);\r\n      this.state = initialState;\r\n  }\r\n\r\n  componentDidMount() {\r\n    let hash = window.location.hash;\r\n    let id = hash.split('/');\r\n    id = id[id.length-1];\r\n    alert(id);\r\n      const currentStore = Object.values(store.getState());\r\n      \r\n      console.dir(currentStore);\r\n      \r\n      const user = currentStore.filter(el => el.id === id);\r\n      console.dir(user);\r\n\r\n      const formElement = document.forms.edit;\r\n     \r\n      formElement.elements.username.value = user[0].username;\r\n      formElement.elements.email.value = user[0].email;\r\n      formElement.elements.password.value = user[0].password;\r\n\r\n      this.setState(() => ({\r\n        username: {\r\n          value :  user[0].username,\r\n        },\r\n        email: {\r\n          value :  user[0].email,\r\n        },\r\n        password: {\r\n          value :  user[0].password,\r\n        },\r\n        id: id\r\n      }));\r\n      //return id;\r\n  }\r\n\r\n/*\r\n * validates the field onBlur if sumbit button is not clicked\r\n * set the validateOnChange to true for that field\r\n * check for error\r\n */\r\n\r\nhandleBlur(validationFunc, evt) {\r\n  const field = evt.target.name;\r\n  // validate onBlur only when validateOnChange for that field is false\r\n  // because if validateOnChange is already true there is no need to validate onBlur\r\n  if (\r\n    this.state[field]['validateOnChange'] === false &&\r\n    this.state.submitCalled === false\r\n  ) {\r\n    this.setState(state => ({\r\n      [field]: {\r\n        ...state[field],\r\n        validateOnChange: true,\r\n        error: validationFunc(state[field].value)\r\n      }\r\n    }));\r\n  }\r\n  return;\r\n}\r\n\r\n/*\r\n * update the value in state for that field\r\n * check for error if validateOnChange is true\r\n */\r\nhandleChange(validationFunc, evt) {\r\n  const field = evt.target.name;\r\n  const fieldVal = evt.target.value;\r\n  this.setState(state => ({\r\n    [field]: {\r\n      ...state[field],\r\n      value: fieldVal,\r\n      error: state[field]['validateOnChange'] ? validationFunc(fieldVal) : ''\r\n    }\r\n  }));\r\n}\r\n\r\nhandleSubmit(evt) {\r\n  //alert('edit');\r\n  evt.preventDefault();\r\n/* console.dir(this.state.username.value);\r\nconsole.dir(this.state.users);\r\nconsole.log(typeof(this.user)); */\r\n\r\n//  store.dispatch(editUser(user));  работает, но обнуляет хранилище и стор\r\n//debugger;\r\n/*\r\n* validate all fields\r\n* check if all fields are valid if yes then submit the Form\r\n* otherwise set errors for the feilds in the state\r\n*/\r\n\r\n\r\n\r\n\r\nconst { username, email, password } = this.state;\r\nconst usernameError = validateFields.validateUsername(username.value);\r\nconst emailError = validateFields.validateEmail(email.value);\r\nconst passwordError = validateFields.validatePassword(password.value);\r\n//const id = \r\n\r\n\r\nif ([usernameError, emailError, passwordError].every(e => e === false)) {\r\n  // no errors submit the form\r\n\r\n  //Сохраняем введенные в форму данные\r\n     let id = this.state.id;\r\n    const currentUser = {\r\n      id: id,\r\n      username: username.value,\r\n      email: email.value,\r\n      password: password.value\r\n    };\r\n\r\n    const currentState = store.getState();\r\n   \r\n\r\n    const newState = Object.values(currentState).map(el => {\r\n      if (el.id === currentUser.id) {\r\n        return currentUser;\r\n      }\r\n      return el;\r\n    });\r\n    \r\n    store.dispatch(editUser(newState));\r\n    //debugger;\r\n      window.location.hash = `/MyAccount/${this.state.id}`;\r\n    \r\n    \r\n\r\n    //localStorage.setItem('users', JSON.stringify(currentUser));\r\n    \r\n   // clear state and show all fields are validated\r\n   this.setState({ ...initialState, allFieldsValidated: true });\r\n   this.showAllFieldsValidated();\r\n}\r\nelse {\r\n // update the state with errors\r\n    this.setState(state => ({\r\n      formname: 'edit',\r\n      titleLink: 'Редактирование профиля',\r\n\r\n      username: {\r\n        ...state.username,\r\n        validateOnChange: true,\r\n        error: usernameError\r\n      },\r\n\r\n      email: {\r\n        ...state.email,\r\n        validateOnChange: true,\r\n        error: emailError\r\n      },\r\n      password: {\r\n        ...state.password,\r\n        validateOnChange: true,\r\n        error: passwordError\r\n      }\r\n    }));\r\n  }\r\n\r\n}//end handlSubmit\r\n\r\nshowAllFieldsValidated() {\r\n  setTimeout(() => {\r\n    this.setState({ allFieldsValidated: false });\r\n  }, 1500);\r\n}\r\n\r\nrender () {\r\n  const { username, email, password, allFieldsValidated } = this.state;\r\n\r\n  return (\r\n    <div className=\"wrap\">\r\n      <header className=\"App-header \">Регистрация</header>\r\n\r\n      <h2>{store.getState().length}</h2>\r\n\r\n      <Form method='post' name=\"edit\"\r\n    className='container col-lg-6 mt-5 border border-dark rounded p-3 js-form' \r\n    onSubmit={e => this.handleSubmit(e)}>\r\n\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"inputUserName\">Username</label>\r\n        <input \r\n          type='text'\r\n          name='username'\r\n          className='form-control'\r\n          placeholder='Введите ваше имя'\r\n          id='inputUserName'\r\n          value={username.value}\r\n          //onChange={this.handleUserInput}\r\n          onChange={evt =>\r\n            this.handleChange(validateFields.validateUsername, evt)\r\n          }\r\n          onBlur={evt =>\r\n            this.handleBlur(validateFields.validateUsername, evt)\r\n          }\r\n\r\n          onFocus={this.handleFocusInput}/>\r\n\r\n          <div className='text-danger'>{username.error}</div>\r\n      </div>\r\n\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"inputEmail\">Email address</label>\r\n        <input \r\n          type='email'\r\n          name='email'\r\n          className='form-control'\r\n          placeholder='Введите ваш Email'\r\n          id='inputEmail'\r\n          value={email.value}\r\n          onChange={evt =>\r\n            this.handleChange(validateFields.validateEmail, evt)\r\n          }\r\n          onBlur={evt =>\r\n            this.handleBlur(validateFields.validateEmail, evt)\r\n          }\r\n\r\n          onFocus={this.handleFocusInput}/>\r\n\r\n          <div className='text-danger'>{email.error}</div>\r\n      </div>\r\n\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"inputPassword\">Password</label>\r\n        <input \r\n          type='password'\r\n          name='password'\r\n          className='form-control'\r\n          placeholder='Введите ваш пароль'\r\n          id='inputPassword'\r\n          value={password.value}\r\n          onChange={evt =>\r\n            this.handleChange(validateFields.validatePassword, evt)\r\n          }\r\n          onBlur={evt =>\r\n            this.handleBlur(validateFields.validatePassword, evt)\r\n          }/>\r\n\r\n        <div className='text-danger'>{password.error}</div>\r\n      </div>\r\n\r\n      \r\n\r\n      <button \r\n        type='submit'\r\n        name='save'\r\n        className='btn btn-secondary btn-block'\r\n        onClick={this.submitForm}\r\n        onMouseDown={() => this.setState({ submitCalled: true })}>\r\n          Сохранить\r\n      </button>\r\n      <button \r\n        type='button'\r\n        name='cancel'\r\n        className='btn btn-secondary btn-block'\r\n        // onClick={() => {window.location.hash =`/MyAccount/${this.id}`;}}>\r\n          onClick={() => {window.history.back()}}>\r\n          Отменить\r\n      </button>\r\n    </Form>\r\n\r\n      <div className=\"card-body\">\r\n        {allFieldsValidated && ( \r\n          <p className=\"text-success text-center\">\r\n            Ваши данные обновлены!\r\n          </p>\r\n        )}\r\n      </div>\r\n\r\n      <hr/>\r\n\r\n      {/* {\r\n        <ul className=\"users-list\">\r\n          {\r\n            users.map((user) => {\r\n\r\n              return (\r\n\r\n                <User\r\n                  key = {user.id}\r\n                  id = {user.id}\r\n                  username = {user.username}\r\n                  email = {user.email}\r\n                  password= {user.password}\r\n                  onBtnEditUsersClick = { () => this.props.editUser(user)}\r\n                />\r\n              )\r\n            })\r\n          }\r\n      </ul>\r\n      } */}\r\n\r\n    </div>\r\n  )\r\n}//end render\r\n\r\n} //end class\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    users: state,\r\n    //isAuth: state.isAuth,\r\n    //isRegistr: state.isRegistr\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  //registr;\r\n  return {\r\n    editUser: (newUsers) => dispatch(auth(newUsers)),\r\n    //registr: (currentUser) => {dispatch(registr(currentUser)); console.log(store.dispath.type)},\r\n  }\r\n}\r\n\r\nexport  default connect(mapStateToProps,mapDispatchToProps)(FormEdit);\r\n\r\n//export  default FormEdit;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport store from '../../store';\r\nimport { editUser } from '../../actions';\r\n\r\n\r\nconst myAccount = (props) => {\r\n    /* function componentWillUnmount() {\r\n        alert(1);\r\n            if(!localStorage.getItem(\"users\")){\r\n                localStorage.setItem(\"users\", this.props.users);\r\n            }\r\n        } */\r\n\r\n    const {editData, openModal,handleSubmit} = props;\r\n        let hash = window.location.hash;\r\n        let id = hash.split('/');\r\n        id = id[id.length-1];\r\n        \r\n     const currentLocalStorage = Object.values(JSON.parse(localStorage.getItem('users')));\r\n    //Ищем пользователя по id\r\n\r\n    const user = currentLocalStorage.filter((el) =>  { console.dir(el); return el['id'] === id});\r\n\r\n    return (\r\n        <>\r\n            <h1>Личный кабинет</h1>\r\n            <div>Мои учетные данные</div>\r\n            <div>id: {user[0].id}</div>\r\n            <div>username: {user[0].username}</div>\r\n            <div>email: {user[0].email}</div>\r\n            <div>password: {user[0].password}</div>\r\n\r\n            <button type=\"button\" onClick={() => {window.location.hash =`/FormEdit/${user[0].id}`;}}>Редактировать данные</button>\r\n            <a href=\"/\">Выйти из аккаунта</a>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default myAccount;","import React from 'react';\n//import ReactDom from 'react-dom';\nimport { Route, NavLink, Switch, Redirect } from 'react-router-dom';\n\n\n//import store from 'store';\n\nimport { connect } from 'react-redux';\n\nimport './App.css';\n\n\nimport Header from './components/Header/Header';\nimport Home from './components/Home/Home';\n\nimport FormAuth from './components/FormAuth/FormAuth';\nimport FormRegistr from './components/FormRegistr/FormRegistr';\nimport FormEdit from './components/FormEdit/FormEdit';\nimport User from './components/User/User';\nimport MyAccount from './components/MyAccount/MyAccount';\n\n\nimport { auth, registr, editUser } from './actions';\nimport store from './store';\n\nclass App extends React.Component {\n  state =  {\n    formName: \"auth\",\n    isAuth: false,\n    users: []\n  }\n\n  componentDidMount() {\n    const local = localStorage.getItem('users');\n    if(local && JSON.parse(local).length !== 0) {\n      this.state.users =  Object.assign(JSON.parse(localStorage.getItem('users')));\n    }\n  }\n\n  editData() {\n    alert('edit');\n    //store.dispatch(editUser(currentUser));\n  }\n\n  onBtnEditUserClick() {\n    console.log('editUserClick');\n  }\n\n  render () {\n   \n    return (\n      <div className=\"App pt-3\">\n        <Header/>\n        <NavLink to=\"/FormRegistr\">Регистрация</NavLink>\n        <a href=\"/FormRegistr\">Регистрация</a>\n        <Switch>\n          <Route key=\"Home\" exact path='/' component={ Home }>\n          {/* { store.getState().isAuth ? <Redirect from=\"/\" to=\"/MyAccount:id\" component={ MyAccount } /> : null} */}\n            <Home/>\n\n            <NavLink to=\"/FormRegistr\">Регистрация</NavLink>\n          </Route>\n\n          <Route key=\"FormRegistr\" exact path='/FormRegistr' component={ FormRegistr }>\n            {this.state.users.length !== 0 ?\n            null\n            :\n            <ul className=\"comments-list\">{'list' + this.state.users.length}\n              {\n                this.state.users.map((user) => { \n                  return (\n                     <User\n                       key = {user.id}\n                       id = {user.id}\n                       username = {user.name}\n                       email= {user.email}\n                       password = {user.password}\n                       // onBtnDeleteCommentClick = { () => this.props.removeComment(comment)}\n                     />\n                   )\n                 })\n               }\n           </ul>\n           \n           }\n\n          <FormRegistr handleSubmit={this.handleSubmit}/>\n\n            <NavLink to=\"/\" onClick={()=>{this.setState({formName : 'auth'})}}>Авторизация</NavLink>\n          </Route>\n\n          <Route key=\"FormEdit\" exact path='/FormEdit/:id' component={ FormEdit }>\n            <FormEdit/>\n          </Route>\n\n          <Route key=\"MyAccount\" exact path='/MyAccount/:id' component={ MyAccount }>\n            <MyAccount/>\n          </Route>\n        </Switch>\n      </div>\n    );\n  };\n\n}\nconst mapStateToProps = (state) => {\n  return {\n    users: state,\n    //isAuth: false,\n    //isRegistr: state.isRegistr */\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    registr: (newUser) => dispatch(registr(newUser)),\n    //auth: (oldUser) => dispatch(registr(oldUser)),\n   // registr,\n    //editUser: (id, state) => dispatch(editUser(id, state))\n    editUser\n}\n}\n\n\nexport default connect(mapStateToProps,mapDispatchToProps) (App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {Provider} from 'react-redux';\nimport {BrowserRouter as Router} from 'react-router-dom';\nimport reportWebVitals from './reportWebVitals';\nimport { HashRouter } from 'react-router-dom';\n\nimport store from './store';\n\nimport 'bootstrap/dist/css/bootstrap.css';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <HashRouter>\n        <App />\n      </HashRouter>\n    </Provider>\n    \n    \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}