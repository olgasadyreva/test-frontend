{"version":3,"sources":["Validation.js","reducers/index.js","store.js","components/User/User.js","components/FormAuth/FormAuth.js","actions/index.js","components/FormRegistr/FormRegistr.js","components/FormEdit/FormEdit.js","components/MyAccount/MyAccount.js","App.js","reportWebVitals.js","index.js"],"names":["validateFields","username","validator","isEmpty","isLength","min","email","isEmail","password","repeatpassword","users","state","action","type","id","payload","initialState","localStorage","getItem","JSON","parse","store","createStore","reducer","subscribe","setItem","stringify","getState","user","props","className","value","validateOnChange","error","submitCalled","allFieldsValidated","registr","React","Component","editUser","newState","FormRegistr","validationFunc","evt","field","target","name","this","setState","fieldVal","preventDefault","usernameError","validateUsername","emailError","validateEmail","passwordError","validatePassword","repeatpasswordError","validaterepeatPassword","every","e","currentUser","Math","random","toString","dispatch","showAllFieldsValidated","titleLink","setTimeout","Form","method","onSubmit","handleSubmit","htmlFor","placeholder","onChange","handleChange","onBlur","handleBlur","onFocus","handleFocusInput","onClick","submitForm","onMouseDown","connect","FormEdit","window","location","pathname","split","length","Object","values","filter","el","formElement","document","forms","edit","elements","currentState","map","assign","history","back","cancelEdit","App","local","newUser","auth","oldUser","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Router","hashHistory","ReactDOM","render","StrictMode","basename","getElementById"],"mappings":"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","file":"static/js/main.1758f8c4.chunk.js","sourcesContent":["import validator from 'validator';\r\n\r\n/*\r\n * This class contains methods for validating fields using 'validator.js' library methods\r\n * The methods return error message if validation failed and false otherwise\r\n * You can use all supported validators and sanitizers of 'validator.js' libaray\r\n * See their docs here https://github.com/validatorjs/validator.js\r\n */\r\n\r\nclass ValidateFields {\r\n  /*\r\n   * A method that takes in the email\r\n   * Validates it\r\n   * Returns the response either error or false if there is no error\r\n   */\r\n  validateUsername(username) {\r\n    if (validator.isEmpty(username)) {\r\n      return 'Поле username обязательно для заполнения';\r\n    } else if (!validator.isLength(username, { min: 3 })) {\r\n      return 'Имя пользователя должно состоять минимум из 3 символов.';\r\n    }\r\n    return false;\r\n  }\r\n\r\n   validateEmail(email) {\r\n    if (validator.isEmpty(email)) {\r\n      return 'Поле еmail обязательно для заполнения';\r\n    } else if (!validator.isEmail(email)) {\r\n      return 'Неверный адрес электронной почты';\r\n    }\r\n    return false;\r\n  }\r\n\r\n  validatePassword(password) {\r\n    if (validator.isEmpty(password)) {\r\n      return 'Поле рassword обязательно для заполнения';\r\n    } else if (!validator.isLength(password, { min: 3 })) {\r\n      return 'Пароль должен состоять минимум из 8 символов';\r\n    }\r\n    return false;\r\n  }\r\n\r\n  validaterepeatPassword(repeatpassword, password) {\r\n    if (validator.isEmpty(repeatpassword)) {\r\n      return 'Поле repeat рassword обязательно для заполнения';\r\n    } else if (!validator.isLength(repeatpassword, { min: 3 })) {\r\n      return 'Повторный пароль должен состоять минимум из 8 символов';\r\n    }else if (password !== repeatpassword) {\r\n      return 'Пароли не совпадают';\r\n    }\r\n    return false;\r\n  }\r\n}\r\n\r\nconst validateFields = new ValidateFields();\r\n\r\n// export the class instance, so we can import and use it anywhere\r\nexport { validateFields };","const users = (state = [], action) => {\r\n  switch (action.type) {\r\n    case ('REGISTR'):\r\n      return [\r\n        ...state,\r\n        {\r\n          id: action.payload.id,\r\n          username: action.payload.username,\r\n          email: action.payload.email,\r\n          password: action.payload.password\r\n        }\r\n      ];\r\n\r\n      case 'EDIT USER':\r\n        return action.payload;\r\n\r\n      default:\r\n        return state\r\n    }\r\n}\r\n\r\nexport default users;","import { createStore } from 'redux';\r\nimport reducer from './reducers';\r\n\r\nconst initialState = localStorage.getItem('users') ? JSON.parse(localStorage.getItem('users')) : [];\r\nconst store = createStore(reducer, initialState);\r\n\r\nstore.subscribe(() => {\r\n    localStorage.setItem('users', JSON.stringify(store.getState()));\r\n\r\n  });\r\n\r\nexport default store;","import React from 'react';\r\n//import '../css/comment.css';\r\n\r\nconst user = (props) => {\r\n  const {id, username, email, password } = props;\r\n\r\n  return(\r\n    <div className=\"user-item d-flex justify-content-center overflow-scroll w-100\" key={id} >\r\n      <div className=\"name col-3 border border-primary p-2 text-break\">{username}</div>\r\n      <div className=\"text col-5 border border-primary p-2 text-break\">{email}</div>\r\n      <div className=\"datetime col-4 border border-primary p-2 text-break\">{password}</div>\r\n    </div>\r\n)\r\n\r\n}\r\n\r\nexport default user;","import React from 'react';\r\nimport { Form } from 'reactstrap';\r\nimport { validateFields } from '../../Validation';\r\nimport store from '../../store';\r\nimport User from '../User/User';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst initialState = {\r\n  email: {\r\n    value: '',\r\n    validateOnChange: false,\r\n    error: ''\r\n  },\r\n  password: {\r\n    value: '',\r\n    validateOnChange: false,\r\n    error: ''\r\n  },\r\n \r\n  submitCalled: false,\r\n  allFieldsValidated: false,\r\n};\r\n\r\nclass FormAuth extends React.Component {\r\n  constructor(props) {\r\n      super(props);\r\n      this.state = initialState;\r\n  }\r\n\r\n\r\n  /*\r\n  * validates the field onBlur if sumbit button is not clicked\r\n  * set the validateOnChange to true for that field\r\n  * check for error\r\n  */\r\n\r\n  handleBlur(validationFunc, evt) {\r\n    const field = evt.target.name;\r\n    // validate onBlur only when validateOnChange for that field is false\r\n    // because if validateOnChange is already true there is no need to validate onBlur\r\n    if (\r\n      this.state[field]['validateOnChange'] === false &&\r\n      this.state.submitCalled === false\r\n    ) {\r\n      this.setState(state => ({\r\n        [field]: {\r\n          ...state[field],\r\n          validateOnChange: true,\r\n          error: validationFunc(state[field].value)\r\n        }\r\n      }));\r\n    }\r\n    return;\r\n  }\r\n\r\n  /*\r\n  * update the value in state for that field\r\n  * check for error if validateOnChange is true\r\n  */\r\n  handleChange(validationFunc, evt) {\r\n    const field = evt.target.name;\r\n    const fieldVal = evt.target.value;\r\n    this.setState(state => ({\r\n      [field]: {\r\n        ...state[field],\r\n        value: fieldVal,\r\n        error: state[field]['validateOnChange'] ? validationFunc(fieldVal) : ''\r\n      }\r\n    }));\r\n  }\r\n\r\n  handleSubmit(evt) {\r\n    evt.preventDefault();\r\n  /*\r\n  * validate all fields\r\n  * check if all fields are valid if yes then submit the Form\r\n  * otherwise set errors for the feilds in the state\r\n  */\r\n\r\n  const { email, password } = this.state;\r\n  const emailError = validateFields.validateEmail(email.value);\r\n  const passwordError = validateFields.validatePassword(password.value);\r\n\r\n  if ([emailError, passwordError].every(e => e === false)) {\r\n    // no errors submit the form\r\n    const currentStore = Object.values(store.getState());\r\n  \r\n    const user = currentStore.filter(el => el.email === email.value);\r\n\r\n    //Проверяем, арегистрирован ли такой email\r\n      if(user.length !== 0) {\r\n\r\n    //Сохраняем введенные в форму данные\r\n        let id = user[0]['id'];\r\n\r\n        const currentUser = {\r\n        id: id,\r\n        email: email.value,\r\n        password: password.value\r\n        };\r\n\r\n        window.location.assign(`/MyAccount/${currentUser.id}`);\r\n      }\r\n      else {\r\n        alert('Вы не зарегистрированы!');\r\n      }\r\n\r\n  }\r\n  else {\r\n  // update the state with errors\r\n      this.setState(state => ({\r\n        formname: 'edit',\r\n        titleLink: 'Авторизация',\r\n\r\n        email: {\r\n          ...state.email,\r\n          validateOnChange: true,\r\n          error: emailError\r\n        },\r\n        password: {\r\n          ...state.password,\r\n          validateOnChange: true,\r\n          error: passwordError\r\n        }\r\n      }));\r\n    }\r\n\r\n  }//end handlSubmit\r\n\r\n  showAllFieldsValidated() {\r\n    setTimeout(() => {\r\n      this.setState({ allFieldsValidated: false });\r\n    }, 1500);\r\n  }\r\n\r\n  render () {\r\n    let users= JSON.parse(localStorage.getItem('users'));\r\n    const { email, password, allFieldsValidated } = this.state;\r\n\r\n    return (\r\n      <div className=\"wrap p-3\">\r\n        <h3 className=\"mb-4\">Форма авторизации</h3>\r\n\r\n        <Form method='get' \r\n          name=\"auth\"\r\n          className='container col-lg-6 col-sm-10 border border-dark rounded p-3 js-form'\r\n          onSubmit={e => this.handleSubmit(e)}>\r\n\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"inputEmail\">Email address</label>\r\n          <input\r\n            type='email'\r\n            name='email'\r\n            className='form-control'\r\n            placeholder='Введите ваш Email'\r\n            id='inputEmail'\r\n            value={email.value}\r\n            onChange={evt =>\r\n              this.handleChange(validateFields.validateEmail, evt)\r\n            }\r\n            onBlur={evt =>\r\n              this.handleBlur(validateFields.validateEmail, evt)\r\n            }\r\n            onFocus={this.handleFocusInput}/>\r\n\r\n            <div className='text-danger'>{email.error}</div>\r\n        </div>\r\n\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"inputPassword\">Password</label>\r\n          <input\r\n            type='password'\r\n            name='password'\r\n            className='form-control'\r\n            placeholder='Введите ваш пароль'\r\n            id='inputPassword'\r\n            value={password.value}\r\n            onChange={evt =>\r\n              this.handleChange(validateFields.validatePassword, evt)\r\n            }\r\n            onBlur={evt =>\r\n              this.handleBlur(validateFields.validatePassword, evt)\r\n            }/>\r\n\r\n          <div className='text-danger'>{password.error}</div>\r\n        </div>\r\n\r\n        <button\r\n          type='submit'\r\n          name='auth'\r\n          className='btn btn-primary btn-block m-auto'\r\n          onClick={this.submitForm}\r\n          onMouseDown={() => this.setState({ submitCalled: true })}>\r\n            Войти\r\n        </button>\r\n      </Form>\r\n\r\n        <div className=\"card-body\">\r\n          {allFieldsValidated && (\r\n            <p className=\"text-success text-center\">\r\n              Вы успешно авторизовались!\r\n            </p>\r\n          )}\r\n        </div>\r\n\r\n        <NavLink to=\"/FormRegistr\" className=\"p-2 btn btn-primary\">Регистрация</NavLink>\r\n\r\n        <hr/>\r\n\r\n        <h3 className=\"mt-4 mb-4\">Зарегистрированные пользователи</h3>\r\n\r\n       { users && users.length !== 0 ? \r\n          <div className=\"col-lg-8 col-md-12 users-list p-3 m-auto overflow-scroll\">\r\n            <div className=\"d-flex justify-content-center w-60 \">\r\n              <div className=\"col-3 border border-primary p-2\">Login</div>\r\n              <div className=\"col-5 border border-primary p-2\">Email</div>\r\n              <div className=\"col-4 border border-primary p-2\">Password</div>\r\n            </div>\r\n            {\r\n              Object.values(users).map((user) => {\r\n\r\n                return (\r\n\r\n                  <User\r\n                    className=\"\"\r\n                    key = {user.id}\r\n                    id = {user.id}\r\n                    username = {user.username}\r\n                    email = {user.email}\r\n                    password= {user.password}\r\n                    onBtnEditUsersClick = { () => this.props.editUser(user)}\r\n                  />\r\n                )\r\n              })\r\n            }\r\n        </div>\r\n        :\r\n          <p className=\"mt-4 mb-4 text-danger\">Зарегистрированных пользователей нет!</p>\r\n        }\r\n\r\n      </div>\r\n    )\r\n\r\n  }//end render\r\n\r\n} //end class\r\n\r\nexport  default FormAuth;","export const registr = (user) => {\r\n  return {\r\n    type: 'REGISTR',\r\n    payload: user,\r\n  }\r\n}\r\n\r\nexport const editUser = (newState) => {\r\n  return {\r\n    type: 'EDIT USER',\r\n    payload: newState\r\n  }\r\n}\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport { Form } from 'reactstrap';\r\nimport { validateFields } from '../../Validation';\r\nimport { connect } from 'react-redux';\r\nimport store from '../../store';\r\nimport { registr } from '../../actions';\r\n\r\nconst initialState = {\r\n  username: {\r\n    value: '',\r\n    validateOnChange: false,\r\n    error: ''\r\n  },\r\n\r\n  email: {\r\n    value: '',\r\n    validateOnChange: false,\r\n    error: ''\r\n  },\r\n  password: {\r\n    value: '',\r\n    validateOnChange: false,\r\n    error: ''\r\n  },\r\n  repeatpassword: {\r\n    value: '',\r\n    validateOnChange: false,\r\n    error: ''\r\n  },\r\n\r\n  submitCalled: false,\r\n  allFieldsValidated: false,\r\n};\r\n\r\nclass FormRegistr extends React.Component {\r\n  constructor(props) {\r\n      super(props);\r\n      this.state = initialState;\r\n  }\r\n\r\n  /*\r\n  * validates the field onBlur if sumbit button is not clicked\r\n  * set the validateOnChange to true for that field\r\n  * check for error\r\n  */\r\n\r\n  handleBlur(validationFunc, evt) {\r\n    const field = evt.target.name;\r\n    // validate onBlur only when validateOnChange for that field is false\r\n    // because if validateOnChange is already true there is no need to validate onBlur\r\n    if (\r\n      this.state[field]['validateOnChange'] === false &&\r\n      this.state.submitCalled === false\r\n    ) {\r\n      this.setState(state => ({\r\n        [field]: {\r\n          ...state[field],\r\n          validateOnChange: true,\r\n          error: validationFunc(state[field].value)\r\n        }\r\n      }));\r\n    }\r\n    return;\r\n  }\r\n\r\n  /*\r\n  * update the value in state for that field\r\n  * check for error if validateOnChange is true\r\n  */\r\n  handleChange(validationFunc, evt) {\r\n    const field = evt.target.name;\r\n    const fieldVal = evt.target.value;\r\n    this.setState(state => ({\r\n      [field]: {\r\n        ...state[field],\r\n        value: fieldVal,\r\n        error: state[field]['validateOnChange'] ? validationFunc(fieldVal) : ''\r\n      }\r\n    }));\r\n  }\r\n\r\n  handleSubmit(evt) {\r\n    evt.preventDefault();\r\n  /*\r\n  * validate all fields\r\n  * check if all fields are valid if yes then submit the Form\r\n  * otherwise set errors for the feilds in the state\r\n  */\r\n\r\n  const { username, email, password, repeatpassword } = this.state;\r\n  const usernameError = validateFields.validateUsername(username.value);\r\n  const emailError = validateFields.validateEmail(email.value);\r\n  const passwordError = validateFields.validatePassword(password.value);\r\n  const repeatpasswordError = validateFields.validaterepeatPassword(repeatpassword.value, password.value);\r\n\r\n\r\n  if ([usernameError, emailError, passwordError, repeatpasswordError].every(e => e === false)) {\r\n    // no errors submit the form\r\n\r\n    //Сохраняем введенные в форму данные\r\n      const id = `f${(~~(Math.random()*1e8)).toString(16)}`;\r\n      const currentUser = {\r\n        id: id,\r\n        username: username.value,\r\n        email: email.value,\r\n        password: password.value\r\n      };\r\n\r\n      store.dispatch(registr(currentUser));\r\n\r\n    // clear state and show all fields are validated\r\n    this.setState({ ...initialState, allFieldsValidated: true });\r\n    this.showAllFieldsValidated();\r\n  }\r\n  else {\r\n  // update the state with errors\r\n      this.setState(state => ({\r\n        titleLink: 'Авторизация',\r\n\r\n        username: {\r\n          ...state.username,\r\n          validateOnChange: true,\r\n          error: usernameError\r\n        },\r\n\r\n        email: {\r\n          ...state.email,\r\n          validateOnChange: true,\r\n          error: emailError\r\n        },\r\n        password: {\r\n          ...state.password,\r\n          validateOnChange: true,\r\n          error: passwordError\r\n        },\r\n        repeatpassword: {\r\n          ...state.repeatpassword,\r\n          validateOnChange: true,\r\n          error: repeatpasswordError\r\n        }\r\n      }));\r\n    }\r\n\r\n  }//end handlSubmit\r\n\r\n  showAllFieldsValidated() {\r\n    setTimeout(() => {\r\n      this.setState({ allFieldsValidated: false });\r\n    }, 1500);\r\n  }\r\n\r\n  render () {\r\n    const { username, email, password, repeatpassword, allFieldsValidated } = this.state;\r\n\r\n    return (\r\n      <div className=\"wrap p-3\">\r\n        <h3 className=\"mb-4\">Регистрация</h3>\r\n\r\n        <Form method='post' name=\"registr\"\r\n          className='container col-lg-6 mt-5 border border-dark rounded p-3 js-form' \r\n          onSubmit={e => this.handleSubmit(e)}>\r\n\r\n          <div className=\"form-group\">\r\n          <label htmlFor=\"inputUserName\">Username</label>\r\n          <input\r\n            type='text'\r\n            name='username'\r\n            className='form-control'\r\n            placeholder='Введите ваше имя'\r\n            id='inputUserName'\r\n            value={username.value}\r\n            onChange={evt =>\r\n              this.handleChange(validateFields.validateUsername, evt)\r\n            }\r\n            onBlur={evt =>\r\n              this.handleBlur(validateFields.validateUsername, evt)\r\n            }\r\n            onFocus={this.handleFocusInput}/>\r\n\r\n            <div className='text-danger'>{username.error}</div>\r\n          </div>\r\n\r\n          <div className=\"form-group\">\r\n          <label htmlFor=\"inputEmail\">Email address</label>\r\n          <input\r\n            type='email'\r\n            name='email'\r\n            className='form-control'\r\n            placeholder='Введите ваш Email'\r\n            id='inputEmail'\r\n            value={email.value}\r\n            onChange={evt =>\r\n              this.handleChange(validateFields.validateEmail, evt)\r\n            }\r\n            onBlur={evt =>\r\n              this.handleBlur(validateFields.validateEmail, evt)\r\n            }\r\n            onFocus={this.handleFocusInput}/>\r\n\r\n            <div className='text-danger'>{email.error}</div>\r\n          </div>\r\n\r\n          <div className=\"form-group\">\r\n          <label htmlFor=\"inputPassword\">Password</label>\r\n          <input\r\n            type='password'\r\n            name='password'\r\n            className='form-control'\r\n            placeholder='Введите ваш пароль'\r\n            id='inputPassword'\r\n            value={password.value}\r\n            onChange={evt =>\r\n              this.handleChange(validateFields.validatePassword, evt)\r\n            }\r\n            onBlur={evt =>\r\n              this.handleBlur(validateFields.validatePassword, evt)\r\n            }/>\r\n\r\n          <div className='text-danger'>{password.error}</div>\r\n          </div>\r\n\r\n          <div className=\"form-group\">\r\n        <label htmlFor=\"inputRepeatPassword\">Repeat Password</label>\r\n        <input\r\n          type='password'\r\n          name='repeatpassword'\r\n          className='form-control'\r\n          placeholder='Повторите пароль'\r\n          id='inputRepeatPassword'\r\n          value={repeatpassword.value}\r\n          onChange={evt =>\r\n            this.handleChange(validateFields.validaterepeatPassword, evt)\r\n          }\r\n          onBlur={evt =>\r\n            this.handleBlur(validateFields.validaterepeatPassword, evt)\r\n          }\r\n          onFocus={this.handleFocusInput}/>\r\n\r\n          <div className='text-danger'>{repeatpassword.error}</div>\r\n          </div>\r\n\r\n          <button\r\n            type='submit'\r\n            name='registr'\r\n            className='btn btn-primary btn-block m-auto'\r\n            onClick={this.submitForm}\r\n            onMouseDown={() => this.setState({ submitCalled: true })}>\r\n              Зарегистрироваться\r\n          </button>\r\n        </Form>\r\n\r\n        <div className=\"card-body\">\r\n        {allFieldsValidated && (\r\n          <p className=\"text-success text-center\">\r\n            Вы зарегистрированы и можете авторизоваться!\r\n          </p>\r\n        )}\r\n        </div>\r\n      </div>\r\n  )\r\n\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    users: state,\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    registr: (currentUser) => {dispatch(registr(currentUser))},\r\n  }\r\n}\r\n\r\nexport  default connect(mapStateToProps,mapDispatchToProps)(FormRegistr);","import React from 'react';\r\nimport { Form } from 'reactstrap';\r\nimport { validateFields } from '../../Validation';\r\nimport { connect } from 'react-redux';\r\nimport store from '../../store';\r\nimport { editUser } from '../../actions';\r\n\r\nconst initialState = {\r\n  username: {\r\n    value: '',\r\n    validateOnChange: false,\r\n    error: ''\r\n  },\r\n\r\n  email: {\r\n    value: '',\r\n    validateOnChange: false,\r\n    error: ''\r\n  },\r\n  password: {\r\n    value: '',\r\n    validateOnChange: false,\r\n    error: ''\r\n  },\r\n\r\n  submitCalled: false,\r\n  allFieldsValidated: false,\r\n  id: ''\r\n};\r\n\r\nclass FormEdit extends React.Component {\r\n  constructor(props) {\r\n      super(props);\r\n      this.state = initialState;\r\n  }\r\n\r\n  componentDidMount() {\r\n    let url = window.location.pathname;\r\n    let id = url.split(\"/\");\r\n    id = id[id.length-1];\r\n\r\n    const currentStore = Object.values(store.getState());\r\n\r\n    const user = currentStore.filter(el => el.id === id);\r\n\r\n    const formElement = document.forms.edit;\r\n    formElement.elements.username.value = user[0].username;\r\n    formElement.elements.email.value = user[0].email;\r\n    formElement.elements.password.value = user[0].password;\r\n\r\n    this.setState(() => ({\r\n      username: {\r\n        value :  user[0].username,\r\n      },\r\n      email: {\r\n        value :  user[0].email,\r\n      },\r\n      password: {\r\n        value :  user[0].password,\r\n      },\r\n      id: id\r\n    }));\r\n  }\r\n\r\n\r\n  /*\r\n  * validates the field onBlur if sumbit button is not clicked\r\n  * set the validateOnChange to true for that field\r\n  * check for error\r\n  */\r\n\r\n  handleBlur(validationFunc, evt) {\r\n    const field = evt.target.name;\r\n    // validate onBlur only when validateOnChange for that field is false\r\n    // because if validateOnChange is already true there is no need to validate onBlur\r\n    if (\r\n      this.state[field]['validateOnChange'] === false &&\r\n      this.state.submitCalled === false\r\n    ) {\r\n      this.setState(state => ({\r\n        [field]: {\r\n          ...state[field],\r\n          validateOnChange: true,\r\n          error: validationFunc(state[field].value)\r\n        }\r\n      }));\r\n    }\r\n    return;\r\n  }\r\n\r\n  /*\r\n  * update the value in state for that field\r\n  * check for error if validateOnChange is true\r\n  */\r\n  handleChange(validationFunc, evt) {\r\n    const field = evt.target.name;\r\n    const fieldVal = evt.target.value;\r\n    this.setState(state => ({\r\n      [field]: {\r\n        ...state[field],\r\n        value: fieldVal,\r\n        error: state[field]['validateOnChange'] ? validationFunc(fieldVal) : ''\r\n      }\r\n    }));\r\n  }\r\n\r\n  handleSubmit(evt) {\r\n    evt.preventDefault();\r\n  /*\r\n  * validate all fields\r\n  * check if all fields are valid if yes then submit the Form\r\n  * otherwise set errors for the feilds in the state\r\n  */\r\n\r\n  const { username, email, password } = this.state;\r\n  const usernameError = validateFields.validateUsername(username.value);\r\n  const emailError = validateFields.validateEmail(email.value);\r\n  const passwordError = validateFields.validatePassword(password.value);\r\n\r\n  if ([usernameError, emailError, passwordError].every(e => e === false)) {\r\n    // no errors submit the form\r\n\r\n    //Сохраняем введенные в форму данные\r\n      const id = this.state.id;\r\n        const currentUser = {\r\n          id: id,\r\n          username: username.value,\r\n          email: email.value,\r\n          password: password.value\r\n        };\r\n\r\n      const currentState = store.getState();\r\n\r\n      const newState = Object.values(currentState).map(el => {\r\n        if (el.id === currentUser.id) {\r\n          return currentUser;\r\n        }\r\n        return el;\r\n      });\r\n\r\n      store.dispatch(editUser(newState));\r\n\r\n      window.location.assign(`/MyAccount/${this.state.id}`);\r\n\r\n    // clear state and show all fields are validated\r\n    this.setState({ ...initialState, allFieldsValidated: true });\r\n    this.showAllFieldsValidated();\r\n  }\r\n  else {\r\n  // update the state with errors\r\n      this.setState(state => ({\r\n        titleLink: 'Редактирование профиля',\r\n\r\n        username: {\r\n          ...state.username,\r\n          validateOnChange: true,\r\n          error: usernameError\r\n        },\r\n\r\n        email: {\r\n          ...state.email,\r\n          validateOnChange: true,\r\n          error: emailError\r\n        },\r\n        password: {\r\n          ...state.password,\r\n          validateOnChange: true,\r\n          error: passwordError\r\n        }\r\n      }));\r\n    }\r\n\r\n  }//end handlSubmit\r\n\r\n  showAllFieldsValidated() {\r\n    setTimeout(() => {\r\n      this.setState({ allFieldsValidated: false });\r\n    }, 1500);\r\n  }\r\n\r\n  cancelEdit() {\r\n    window.history.back();\r\n  }\r\n\r\n  render () {\r\n    const { username, email, password, allFieldsValidated } = this.state;\r\n\r\n    return (\r\n      <div className=\"wrap p-3\">\r\n        <h3 className=\"mb-4\">Редактирование профиля</h3>\r\n\r\n        <Form method=\"post\" name=\"edit\"\r\n          className='container col-lg-6 mt-5 border border-dark rounded p-3 js-form' \r\n          onSubmit={e => this.handleSubmit(e)}>\r\n\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"inputUserName\">Username</label>\r\n            <input\r\n              type='text'\r\n              name='username'\r\n              className='form-control'\r\n              placeholder='Введите ваше имя'\r\n              id='inputUserName'\r\n              value={username.value}\r\n              onChange={evt =>\r\n                this.handleChange(validateFields.validateUsername, evt)\r\n              }\r\n              onBlur={evt =>\r\n                this.handleBlur(validateFields.validateUsername, evt)\r\n              }\r\n\r\n              onFocus={this.handleFocusInput}/>\r\n\r\n              <div className='text-danger'>{username.error}</div>\r\n          </div>\r\n\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"inputEmail\">Email address</label>\r\n            <input\r\n              type='email'\r\n              name='email'\r\n              className='form-control'\r\n              placeholder='Введите ваш Email'\r\n              id='inputEmail'\r\n              value={email.value}\r\n              onChange={evt =>\r\n                this.handleChange(validateFields.validateEmail, evt)\r\n              }\r\n              onBlur={evt =>\r\n                this.handleBlur(validateFields.validateEmail, evt)\r\n              }\r\n              onFocus={this.handleFocusInput}/>\r\n\r\n              <div className='text-danger'>{email.error}</div>\r\n          </div>\r\n\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"inputPassword\">Password</label>\r\n            <input\r\n              type='password'\r\n              name='password'\r\n              className='form-control'\r\n              placeholder='Введите ваш пароль'\r\n              id='inputPassword'\r\n              value={password.value}\r\n              onChange={evt =>\r\n                this.handleChange(validateFields.validatePassword, evt)\r\n              }\r\n              onBlur={evt =>\r\n                this.handleBlur(validateFields.validatePassword, evt)\r\n              }/>\r\n\r\n            <div className='text-danger'>{password.error}</div>\r\n          </div>\r\n\r\n          <button\r\n            type='submit'\r\n            name='save'\r\n            className='btn btn-primary btn-block m-auto'\r\n            onClick={this.submitForm}\r\n            onMouseDown={() => this.setState({ submitCalled: true })}>\r\n              Сохранить\r\n          </button>\r\n          <button\r\n            type='button'\r\n            name='cancel'\r\n            className='btn btn-secondary btn-block'\r\n            onClick={this.cancelEdit}>\r\n              Отменить\r\n          </button>\r\n        </Form>\r\n\r\n        <div className=\"card-body\">\r\n          {allFieldsValidated && (\r\n            <p className=\"text-success text-center\">\r\n              Ваши данные обновлены!\r\n            </p>\r\n          )}\r\n        </div>\r\n\r\n        <hr/>\r\n\r\n      </div>\r\n    )\r\n  }//end render\r\n\r\n} //end class\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    users: state,\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = () => {\r\n  return {\r\n    editUser\r\n  }\r\n}\r\n\r\nexport  default connect(mapStateToProps,mapDispatchToProps)(FormEdit);\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nlet url = window.location.pathname;\r\nlet id = url.split(\"/\");\r\nid = id[id.length-1];\r\n\r\nconst myAccount = () => {\r\n    const currentLocalStorage = Object.values(JSON.parse(localStorage.getItem('users')));\r\n\r\n  //Ищем пользователя по id\r\n    const user = currentLocalStorage.filter((el) =>  { return el['id'] === id});\r\n\r\n    return (\r\n        <div className=\"wrap col-md-4 col-xs-12 m-auto\">\r\n            <h3 className=\"mb-4\">Личный кабинет</h3>\r\n\r\n            <h4 className=\"mb-4\">Мои учетные данные:</h4>\r\n\r\n            <div className=\"container p-3 border border-dark rounded mw-30 mb-4 \">\r\n                <div className=\"d-flex flex-row justify-content-between\">\r\n                    <div>id:</div>\r\n                    <div>{user[0].id}</div>\r\n                </div>\r\n                <div className=\"d-flex flex-row justify-content-between\">\r\n                    <div>username:</div>\r\n                    <div>{user[0].username}</div>\r\n                </div>\r\n                <div className=\"d-flex flex-row justify-content-between\">\r\n                    <div>email:</div>\r\n                    <div>{user[0].email}</div>\r\n                </div>\r\n                <div className=\"d-flex flex-row justify-content-between\">\r\n                    <div>password:</div>\r\n                    <div>{user[0].password}</div>\r\n                </div>\r\n            </div>\r\n\r\n            <button className=\"col-lg-8 col-md-10 col-sm-12 p-2 btn btn-block btn-primary mb-3 mx-auto\" type=\"button\" onClick={() => {window.location.assign(`/FormEdit/${user[0].id}`);}}>Редактировать данные</button>\r\n            <Link to=\"/\" className=\"col-lg-8 col-md-10 col-sm-12 d-block mx-auto p-2 btn btn-block btn-secondary\" role=\"button\">Выйти из аккаунта</Link>\r\n         </div>\r\n    )\r\n}\r\n\r\nexport default myAccount;","import React from 'react';\nimport { Route, NavLink, Switch } from 'react-router-dom';\n\nimport { connect } from 'react-redux';\n\nimport './App.scss';\n\nimport Header from './components/Header/Header';\nimport Home from './components/Home/Home';\nimport FormRegistr from './components/FormRegistr/FormRegistr';\nimport FormEdit from './components/FormEdit/FormEdit';\nimport User from './components/User/User';\nimport MyAccount from './components/MyAccount/MyAccount';\n\n\n\nimport { registr, editUser } from './actions';\n\nclass App extends React.Component {\n  state =  {\n    users: []\n  }\n\n  componentDidMount() {\n    const local = localStorage.getItem('users');\n    if(local && JSON.parse(local).length !== 0) {\n\n      this.setState({'users' : Object.assign(JSON.parse(localStorage.getItem('users')))});\n    }\n  }\n\n  render () {\n\n    return (\n      <div className=\"App pt-5\">\n        {/* <Header/> */}\n        {/* <NavLink to='/' className=\"p-2 btn btn-secondary\">Autorization</NavLink> */}\n        {/* <NavLink to='/' className=\"p-2 btn btn-secondary\">Autorization</NavLink> */}\n\n        <Switch>\n          {/* <Route key=\"Home\" exact path='/' component={ Home }>\n            <Home>HOME</Home>\n\n            <NavLink to=\"/FormRegistr\" className=\"p-2 btn btn-primary\">Регистрация</NavLink>\n          </Route> */}\n\n          {/* <Route key=\"FormRegistr\" exact path='/FormRegistr' component={ FormRegistr }>\n            {this.state.users.length !== 0 ?\n              null\n              :\n              <ul className=\"comments-list\">\n                {\n                  this.state.users.map((user) => {\n                    return (\n                      <User\n                        key = {user.id}\n                        id = {user.id}\n                        username = {user.name}\n                        email= {user.email}\n                        password = {user.password}/>\n                    )\n                  })\n                }\n              </ul>\n            }\n\n            <FormRegistr handleSubmit={this.handleSubmit}/>\n\n            <NavLink to=\"/\" className=\"p-2 btn btn-primary\">Авторизация!!!!</NavLink>\n          </Route> */}\n\n          {/* <Route key=\"FormEdit\" exact path='/FormEdit/:id' component={ FormEdit }>\n            <FormEdit/>\n\n          </Route> */}\n\n          {/* <Route key=\"MyAccount\" exact path='/MyAccount/:id' component={ MyAccount }>\n            <MyAccount/>\n          </Route> */}\n        </Switch>\n      </div>\n    );\n  };\n\n}\nconst mapStateToProps = (state) => {\n  return {\n    users: state,\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    registr: (newUser) => dispatch(registr(newUser)),\n    auth: (oldUser) => dispatch(registr(oldUser)),\n    editUser: (id, state) => dispatch(editUser(id, state))\n}\n}\n\n\nexport default connect(mapStateToProps,mapDispatchToProps) (App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport {Provider} from 'react-redux';\nimport {BrowserRouter as Router} from 'react-router-dom';\nimport reportWebVitals from './reportWebVitals';\nimport { HashRouter } from 'react-router-dom'\n\nimport store from './store';\n\nimport 'bootstrap/dist/css/bootstrap.css';\n\nlet hashHistory = Router.hashHistory;\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <HashRouter basename=\"/olgasadyreva.github.io\" history={hashHistory}> */}\n      <HashRouter basename=\"/olgasadyreva.github.io/test-frontend\">\n        <App />\n      </HashRouter>\n    </Provider>\n    \n    \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}